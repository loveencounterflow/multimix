{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/recipes.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'MULTIMIX/RECIPES'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nTOOLS                     = require './tools'\n#...........................................................................................................\nσ_new_state               = Symbol.for 'new_state'\nσ_reject                  = Symbol.for 'reject'\nσ_finalize                = Symbol.for 'finalize'\ntypes                     = require './types'\n{ isa\n  type_of }               = types.export()\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@[ σ_new_state ] = ( recipe, mixins ) ->\n  S                   = {}\n  S.recipe            = if recipe? then ( CND.deep_copy recipe ) else {}\n  S.mixins            = mixins\n  S.recipe_fallback   = S.recipe[ 'fallback' ] ? 'assign'\n  #.........................................................................................................\n  S.cache             = {}\n  S.averages          = {}\n  S.tag_keys          = []\n  # S.skip              = new Set()\n  S.functions         = {}\n  S.path              = null\n  S.root              = null\n  S.current           = null\n  S.seen              = new Map()\n  #.........................................................................................................\n  if ( fields = S.recipe[ 'fields' ] )?\n    for key, reducer of fields\n      if reducer is 'include'\n        fields[ key ] = S.recipe_fallback\n        continue\n      if reducer is 'tag'\n        S.tag_keys.push key\n        continue\n      if isa.function reducer\n        S.functions[  key ] = reducer\n        fields[       key ] = 'function'\n  #.........................................................................................................\n  return S\n\n#-----------------------------------------------------------------------------------------------------------\n@[ σ_finalize ] = ( S ) ->\n  ### tags ###\n  for key, value of S.current\n    continue unless key in S.tag_keys\n    S.current[ key ] = TOOLS.reduce_tag S.current[ key ]\n  #.........................................................................................................\n  ### averages ###\n  for key, [ sum, count, ] of S.averages\n    S.current[ key ] = sum / count\n  #.........................................................................................................\n  ### functions ###\n  for key, values of S.cache\n    unless isa.function ( method = S.functions[ key ] )\n      throw new Error \"not a function for key #{rpr key}: #{rpr method}\"\n    S.current[ key ] = method values, S\n  #.........................................................................................................\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ σ_reject ] = ( S, key, value ) ->\n  # return ( S.skip.has key ) or ( value is undefined and S.recipe_name isnt 'assign' )\n  return value is undefined and S.recipe_name isnt 'assign'\n\n\n#===========================================================================================================\n# RECIPES\n#-----------------------------------------------------------------------------------------------------------\n@assign = ( S, key, value ) ->\n  if value is undefined then delete S.current[ key ]\n  else                              S.current[ key ] = value\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@skip = ( S, key, value ) -> null\n\n#-----------------------------------------------------------------------------------------------------------\n@merge = ( S, key, value ) ->\n  throw new Error \"expected a POD, got a #{type_of value}\" unless isa.object value\n  target = ( S.current[ key ] ?= {} )\n  target[ sub_key ] = sub_value for sub_key, sub_value of value\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@append = ( S, key, value ) ->\n  ### TAINT consider to use `Symbol.isConcatSpreadable` in the future ###\n  target = ( S.current[ key ] ?= [] )\n  if isa.list then  target.splice target.length, 0, value...\n  else                  target.push                     value\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@list = ( S, key, value ) ->\n  ( S.current[ key ] ?= [] ).push value\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@add = ( S, key, value ) ->\n  S.current[ key ] = ( S.current[ key ] ? 0 ) + value\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@average = ( S, key, value ) ->\n  target      = S.averages[ key ] ?= [ 0, 0, ]\n  target[ 0 ] = target[ 0 ] + value\n  target[ 1 ] = target[ 1 ] + 1\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@tag = ( S, key, value ) ->\n  TOOLS.meld ( target = S.current[ key ] ?= [] ), value\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@function = ( S, key, value ) ->\n  ### Cache current value for later processing by `σ_finalize`: ###\n  ( S.cache[ key ] ?= [] ).push value\n  return null\n\n"
  ]
}