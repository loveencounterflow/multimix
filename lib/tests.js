// Generated by CoffeeScript 1.10.0
(function() {
  var CND, alert, badge, debug, echo, help, include, info, log, mix, rpr, s, t, test, urge, warn, whisper,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  CND = require('cnd');

  rpr = CND.rpr;

  badge = 'MULTIMIX/TESTS';

  log = CND.get_logger('plain', badge);

  info = CND.get_logger('info', badge);

  whisper = CND.get_logger('whisper', badge);

  alert = CND.get_logger('alert', badge);

  debug = CND.get_logger('debug', badge);

  warn = CND.get_logger('warn', badge);

  help = CND.get_logger('help', badge);

  urge = CND.get_logger('urge', badge);

  echo = CND.echo.bind(CND);

  test = require('guy-test');

  mix = require('./main').mix;

  s = function(x) {
    return JSON.stringify(x, null, '  ');
  };

  t = function(x) {
    return JSON.stringify(x);
  };

  this._prune = function() {
    var name, value;
    for (name in this) {
      value = this[name];
      if (name.startsWith('_')) {
        continue;
      }
      if (indexOf.call(include, name) < 0) {
        delete this[name];
      }
    }
    return null;
  };

  this._main = function() {
    return test(this, {
      'timeout': 3000
    });
  };

  this["demo (1)"] = function(T) {
    var a, b, my_mix, test_tools;
    test_tools = function(T, x) {
      if (x.TOOLS == null) {
        return T.fail("object has no property 'TOOLS'");
      }
      T.ok(CND.is_subset(['normalize_tag', 'unique', 'append', 'meld'], Object.keys(x.TOOLS)));
      return null;
    };
    test_tools(T, mix);
    my_mix = mix.use({
      primes: 'append'
    });
    test_tools(T, my_mix);
    a = {
      id: 'a',
      primes: [2, 3, 5, 7],
      report: function() {
        return t({
          id: this.id,
          primes: this.primes
        });
      }
    };
    b = my_mix(a, {
      id: 'b',
      primes: [13, 17, 23]
    });
    T.eq(a['primes'], [2, 3, 5, 7]);
    T.eq(b['primes'], [2, 3, 5, 7, 13, 17, 23]);
    T.eq(a.report(), '{"id":"a","primes":[2,3,5,7]}');
    T.eq(b.report(), '{"id":"b","primes":[2,3,5,7,13,17,23]}');
    return null;
  };

  this["options example (1)"] = function(T) {
    var options, options_base, options_user;
    options_base = {
      zoom: '125%',
      paths: {
        app: '~/sample',
        fonts: '~/.fonts'
      },
      fonts: {
        files: {
          'Arial': 'HelveticaNeue.ttf'
        },
        sizes: {
          unit: 'pt',
          steps: [8, 10, 11, 12, 14, 16, 18, 24]
        }
      }
    };
    options_user = {
      zoom: '85%',
      fonts: {
        files: {
          'ComicSans': 'MSComicSans.ttf'
        }
      }
    };
    options = mix(options_base, options_user);
    T.ok(options['paths'] === options_base['paths']);
    T.ok(options['fonts'] === options_user['fonts']);
    T.eq(options['zoom'], options_user['zoom']);
    return null;
  };

  this["options example (2)"] = function(T) {
    var mix_options, options, options_base, options_user, reducers;
    options_base = {
      primes: [2, 3, 5],
      zoom: '125%',
      paths: {
        app: '~/sample',
        fonts: '~/.fonts'
      },
      fonts: {
        files: {
          'Arial': 'HelveticaNeue.ttf'
        },
        sizes: {
          unit: 'pt',
          steps: [8, 10, 11, 12, 14, 16, 18, 24]
        }
      },
      words: {
        foo: 3,
        bar: 3
      },
      speed: 100,
      weight: 456,
      tags: ['alpha', 'beta', 'gamma', 'delta'],
      fruit: 'banana'
    };
    options_user = {
      primes: [7, 11, 13],
      zoom: '85%',
      'only-here': true,
      'to-be-skipped': true,
      fonts: {
        files: {
          'ComicSans': 'MSComicSans.ttf'
        }
      },
      words: {
        supercalifragilistic: 20
      },
      speed: 50,
      weight: 123,
      tags: ['-alpha', 'beta', 'gamma', 'epsilon'],
      fruit: 'pineapple'
    };
    reducers = {
      primes: 'append',
      words: 'merge',
      speed: 'average',
      weight: 'add',
      'to-be-skipped': 'skip',
      tags: 'tag',
      fruit: 'list',
      zoom: function(zoom_percentages) {
        var R, i, len, percentage;
        R = 1;
        for (i = 0, len = zoom_percentages.length; i < len; i++) {
          percentage = zoom_percentages[i];
          R *= (parseFloat(percentage)) / 100;
        }
        return ((R * 100).toFixed(2)) + "%";
      }
    };
    mix_options = mix.use(reducers);
    options = mix_options(options_base, options_user);
    T.ok(options['paths'] === options_base['paths']);
    T.ok(options['fonts'] === options_user['fonts']);
    T.eq(options['primes'], [2, 3, 5, 7, 11, 13]);
    T.eq(options['zoom'], '106.25%');
    T.eq(options['words'], {
      foo: 3,
      bar: 3,
      supercalifragilistic: 20
    });
    T.eq(options['speed'], 75);
    T.eq(options['weight'], 579);
    T.eq(options['tags'], ['delta', 'beta', 'gamma', 'epsilon']);
    T.eq(options['only-here'], true);
    T.eq(options['to-be-skipped'], void 0);
    T.eq(options['fruit'], ['banana', 'pineapple']);
    return null;
  };

  this["options example (3)"] = function(T) {
    var fonts_reducers, options, options_base, options_user, options_user_copy, outer_reducers;
    options_base = {
      paths: {
        app: '~/sample',
        fonts: '~/.fonts'
      },
      fonts: {
        files: {
          'Arial': 'HelveticaNeue.ttf'
        }
      }
    };
    options_user = {
      fonts: {
        files: {
          'ComicSans': 'MSComicSans.ttf'
        }
      }
    };
    outer_reducers = null;
    fonts_reducers = {
      files: 'merge'
    };
    options_user_copy = Object.assign({}, options_user);
    options_user_copy['fonts'] = (mix.use(fonts_reducers))(options_base['fonts'], options_user_copy['fonts']);
    options = (mix.use(outer_reducers))(options_base, options_user_copy);
    T.eq(options, {
      "paths": {
        "app": "~/sample",
        "fonts": "~/.fonts"
      },
      "fonts": {
        "files": {
          "Arial": "HelveticaNeue.ttf",
          "ComicSans": "MSComicSans.ttf"
        }
      }
    });
    return null;
  };

  this["options example with nested reducers"] = function(T) {
    var options, options_base, options_user, reducers;
    options_base = {
      paths: {
        app: '~/sample',
        fonts: '~/.fonts'
      },
      fonts: {
        files: {
          'Arial': 'HelveticaNeue.ttf'
        }
      },
      foo: {
        bar: {
          baz: 42
        }
      }
    };
    options_user = {
      fonts: {
        files: {
          'ComicSans': 'MSComicSans.ttf'
        }
      },
      alpha: {
        beta: {
          gamma: 108
        }
      }
    };
    reducers = {
      fonts: {
        files: 'merge'
      },
      foo: {
        bar: {
          baz: function(values, S) {
            return S.path;
          }
        }
      },
      alpha: {
        beta: {
          gamma: function(values, S) {
            return S.path;
          }
        }
      }
    };
    options = (mix.use(reducers))(options_base, options_user);
    urge('7631', t(options));
    T.eq(options, {
      "fonts": {
        "files": {
          "Arial": "HelveticaNeue.ttf",
          "ComicSans": "MSComicSans.ttf"
        }
      },
      "foo": {
        "bar": {
          "baz": "foo/bar/baz"
        }
      },
      "alpha": {
        "beta": {
          "gamma": "alpha/beta/gamma"
        }
      },
      "paths": {
        "app": "~/sample",
        "fonts": "~/.fonts"
      }
    });
    return null;
  };

  this["unused reducers must not cause entry"] = function(T) {
    var options, options_base, options_user, reducers;
    options_base = {
      foo: {
        bar: {
          baz: 42
        }
      }
    };
    options_user = {
      fonts: {
        files: {
          'ComicSans': 'MSComicSans.ttf'
        }
      }
    };
    reducers = {
      foo: {
        bar: {
          baz: function(values, S) {
            return S.path;
          }
        }
      },
      alpha: {
        beta: {
          gamma: function(values, S) {
            return S.path;
          }
        }
      },
      delta: 'list',
      qplah: {
        gagh: 'append'
      }
    };
    options = (mix.use(reducers))(options_base, options_user);
    urge('7631', t(options));
    T.eq(options, {
      "foo": {
        "bar": {
          "baz": "foo/bar/baz"
        }
      },
      "fonts": {
        "files": {
          "ComicSans": "MSComicSans.ttf"
        }
      }
    });
    return null;
  };

  if (module.parent == null) {
    include = ["demo (1)", "options example (1)", "options example (2)", "options example (3)", "options example with nested reducers"];
    this._prune();
    this._main();
  }

}).call(this);

//# sourceMappingURL=tests.js.map
