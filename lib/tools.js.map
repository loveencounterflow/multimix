{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/tools.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'MULTIMIX/TOOLS'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\n\n\n\n#-----------------------------------------------------------------------------------------------------------\n@normalize_tag = ( tag ) ->\n  ### Given a single string or a list of strings, return a new list that contains all whitespace-delimited\n  words in the strings ###\n  return @normalize_tag [ tag, ] unless CND.isa_list tag\n  R = []\n  for t in tag\n    continue if t.length is 0\n    R.splice R.length, 0, ( t.split /\\s+/ )...\n  ### TAINT consider to return `@unique R` instead ###\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@unique = ( list ) ->\n  ### Return a copy of `listÂ´ that only contains the last occurrence of each value ###\n  ### TAINT consider to modify, not copy `list` ###\n  seen  = new Set()\n  R     = []\n  for idx in [ list.length - 1 .. 0 ] by -1\n    element = list[ idx ]\n    continue if seen.has element\n    seen.add element\n    R.unshift element\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@append = ( a, b ) ->\n  ### Append elements of list `b` to list `a` ###\n  ### TAINT JS has `[]::concat` ###\n  a.splice a.length, 0, b...\n  return a\n\n#-----------------------------------------------------------------------------------------------------------\n@meld = ( list, value ) ->\n  ### When `value` is a list, `@append` it to `list`; else, `push` `value` to `list` ###\n  if CND.isa_list value then  @append list, value\n  else                        list.push value\n  return list\n\n#-----------------------------------------------------------------------------------------------------------\n@fuse = ( list ) ->\n  ### Flatten `list`, then apply `@unique` to it. Does not copy `list` but modifies it ###\n  R = []\n  @meld R, element for element in list\n  R = @unique R\n  list.splice 0, list.length, R...\n  return list\n\n#-----------------------------------------------------------------------------------------------------------\n@reduce_tag = ( raw ) ->\n  source  = @fuse raw\n  R       = []\n  exclude = null\n  #.........................................................................................................\n  for idx in [ source.length - 1 .. 0 ] by -1\n    tag = source[ idx ]\n    continue if exclude? and exclude.has tag\n    if tag.startsWith '-'\n      break if tag is '-*'\n      ( exclude ?= new Set() ).add tag[ 1 .. ]\n      continue\n    R.unshift tag\n  #.........................................................................................................\n  return R\n\n\n"
  ]
}