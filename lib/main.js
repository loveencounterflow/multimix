// Generated by CoffeeScript 1.10.0
(function() {
  var CND, MULTIMIX, alert, badge, debug, echo, help, info, join, log, rpr, urge, warn, whisper, σ_finalize, σ_new_state, σ_reject, σ_unknown_type,
    slice = [].slice;

  CND = require('cnd');

  rpr = CND.rpr;

  badge = 'MULTIMIX';

  log = CND.get_logger('plain', badge);

  info = CND.get_logger('info', badge);

  whisper = CND.get_logger('whisper', badge);

  alert = CND.get_logger('alert', badge);

  debug = CND.get_logger('debug', badge);

  warn = CND.get_logger('warn', badge);

  help = CND.get_logger('help', badge);

  urge = CND.get_logger('urge', badge);

  echo = CND.echo.bind(CND);

  join = require('path').join;

  σ_new_state = Symbol["for"]('new_state');

  σ_reject = Symbol["for"]('reject');

  σ_finalize = Symbol["for"]('finalize');

  σ_unknown_type = Symbol["for"]('unknown_type');

  MULTIMIX = {};

  MULTIMIX.TOOLS = require('./tools');

  MULTIMIX.RECIPES = require('./recipes');

  MULTIMIX.COPIERS = require('./copiers');

  MULTIMIX._get_seed = function(S, seed) {
    var copy, description, has_fields, type;
    type = CND.type_of(seed);
    description = MULTIMIX.COPIERS.type_descriptions[type];
    if (description == null) {
      description = MULTIMIX.COPIERS.type_descriptions[σ_unknown_type];
    }
    has_fields = description.has_fields, copy = description.copy;
    return copy.call(MULTIMIX, S, seed);
  };

  MULTIMIX.mix = function(mixins, recipe, root, selector) {
    var S, field_key, field_value, fields, hook, i, j, len, len1, mixin, mixin_seed, mixin_tail, mx_key, mx_value, partial_mixin, partial_mixins, reducer, ref, ref1, ref2, seed, type;
    if (root == null) {
      root = null;
    }
    if (selector == null) {
      selector = [];
    }
    if (mixins.length === 0) {
      return null;
    }
    mixin_seed = mixins[0], mixin_tail = 2 <= mixins.length ? slice.call(mixins, 1) : [];
    S = MULTIMIX.RECIPES[σ_new_state](recipe, mixins);
    seed = MULTIMIX._get_seed(S, mixin_seed);
    S.seed = seed;
    if (root == null) {
      root = seed;
    }

    /* Deal with nested recipe first: */
    if ((fields = S.recipe['fields']) != null) {
      for (field_key in fields) {
        field_value = fields[field_key];
        if (CND.isa_pod(field_value)) {
          selector.push(field_key);
          partial_mixins = [];
          for (i = 0, len = mixins.length; i < len; i++) {
            mixin = mixins[i];
            partial_mixin = mixin[field_key];
            if (partial_mixin != null) {
              partial_mixins.push(partial_mixin);
            }
          }
          if (partial_mixins.length > 0) {
            S.seed[field_key] = MULTIMIX.mix(partial_mixins, field_value, root, selector);
          }
          recipe[field_key] = 'skip';
          selector.pop(field_key);
        }
      }
    }

    /* Process unnested recipe: */
    for (j = 0, len1 = mixins.length; j < len1; j++) {
      mixin = mixins[j];
      for (mx_key in mixin) {
        mx_value = mixin[mx_key];
        S.path = join.apply(null, slice.call(selector).concat([mx_key]));
        S.root = root;
        S.current = S.seed;
        S.reducer_name = (ref = (ref1 = S.recipe['fields']) != null ? ref1[mx_key] : void 0) != null ? ref : S.reducer_fallback;
        if (MULTIMIX.RECIPES[σ_reject](S, mx_key, mx_value)) {
          continue;
        }
        if ((reducer = MULTIMIX.RECIPES[S.reducer_name]) == null) {
          throw new Error("unknown reducer " + (rpr(S.reducer_name)));
        }
        reducer.call(MULTIMIX.RECIPES, S, mx_key, mx_value);
      }
    }
    MULTIMIX.RECIPES[σ_finalize](S);
    if ((hook = (ref2 = S.recipe) != null ? ref2['after'] : void 0) != null) {
      if ((type = CND.type_of(hook)) !== 'function') {
        throw new Error("expected function for 'after' hook, got a " + type);
      }
      hook(S);
    }
    return S.seed;
  };

  MULTIMIX.use = function() {
    var R, recipe, recipes;
    recipes = 1 <= arguments.length ? slice.call(arguments, 0) : [];
    recipes.splice(0, 0, {
      'fallback': 'assign'
    });
    recipe = MULTIMIX.mix(recipes);
    R = function() {
      var mixins;
      mixins = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      return MULTIMIX.mix(mixins, recipe);
    };
    R.use = MULTIMIX.use;
    return R;
  };

  module.exports = {
    mix: MULTIMIX.use()
  };

}).call(this);

//# sourceMappingURL=main.js.map
