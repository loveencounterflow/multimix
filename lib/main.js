// Generated by CoffeeScript 1.10.0
(function() {
  var CND, MULTIMIX, alert, badge, debug, echo, help, info, log, rpr, urge, warn, whisper,
    slice = [].slice;

  CND = require('cnd');

  rpr = CND.rpr;

  badge = 'MULTIMIX';

  log = CND.get_logger('plain', badge);

  info = CND.get_logger('info', badge);

  whisper = CND.get_logger('whisper', badge);

  alert = CND.get_logger('alert', badge);

  debug = CND.get_logger('debug', badge);

  warn = CND.get_logger('warn', badge);

  help = CND.get_logger('help', badge);

  urge = CND.get_logger('urge', badge);

  echo = CND.echo.bind(CND);

  MULTIMIX = {};

  MULTIMIX.TOOLS = require('./tools');

  MULTIMIX.REDUCERS = require('./reducers');

  MULTIMIX.mix = function(me, reducers, mixins) {
    var R, S, i, key, len, mixin, reducer, reducer_name, ref, value, σ_finalize, σ_new_state, σ_reject;
    σ_new_state = Symbol["for"]('new_state');
    σ_reject = Symbol["for"]('reject');
    σ_finalize = Symbol["for"]('finalize');
    if (!(mixins.length > 0)) {
      return null;
    }

    /* TAINT support multiple types at all or only PODs? */
    R = CND.isa_list(mixins[0]) ? [] : {};
    S = me.REDUCERS[σ_new_state](reducers);
    for (i = 0, len = mixins.length; i < len; i++) {
      mixin = mixins[i];
      for (key in mixin) {
        value = mixin[key];
        if (me.REDUCERS[σ_reject](S, R, key, value)) {
          continue;
        }
        reducer_name = (ref = S.reducers[key]) != null ? ref : S.reducer_fallback;
        if ((reducer = me.REDUCERS[reducer_name]) == null) {
          throw new Error("unknown reducer " + (rpr(reducer_name)));
        }
        reducer.call(me.REDUCERS, S, R, key, value);
      }
    }
    me.REDUCERS[σ_finalize](S, R);
    return R;
  };

  MULTIMIX.use = function() {
    var R, custom_reducers, reducers;
    custom_reducers = 1 <= arguments.length ? slice.call(arguments, 0) : [];

    /* Returns a version of mix that uses the reducers passed in to `use`; the resulting reducer is
    derived form the reducers list by applying `mix`. Turtles.
     */
    custom_reducers.splice(0, 0, {
      '*': 'assign'
    });
    reducers = MULTIMIX.mix(MULTIMIX, null, custom_reducers);
    R = function() {
      var mixins;
      mixins = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      return MULTIMIX.mix(R, reducers, mixins);
    };
    R.TOOLS = MULTIMIX.TOOLS;
    R.REDUCERS = MULTIMIX.REDUCERS;
    R.use = MULTIMIX.use;
    return R;
  };

  module.exports = {
    mix: MULTIMIX.use()
  };

}).call(this);

//# sourceMappingURL=main.js.map
