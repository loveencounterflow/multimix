// Generated by CoffeeScript 1.10.0
(function() {
  var CND, MULTIMIX, alert, badge, debug, echo, help, info, join, log, rpr, urge, warn, whisper, σ_finalize, σ_new_state, σ_reject, σ_unknown_type,
    slice = [].slice;

  CND = require('cnd');

  rpr = CND.rpr;

  badge = 'MULTIMIX';

  log = CND.get_logger('plain', badge);

  info = CND.get_logger('info', badge);

  whisper = CND.get_logger('whisper', badge);

  alert = CND.get_logger('alert', badge);

  debug = CND.get_logger('debug', badge);

  warn = CND.get_logger('warn', badge);

  help = CND.get_logger('help', badge);

  urge = CND.get_logger('urge', badge);

  echo = CND.echo.bind(CND);

  join = require('path').join;

  σ_new_state = Symbol["for"]('new_state');

  σ_reject = Symbol["for"]('reject');

  σ_finalize = Symbol["for"]('finalize');

  σ_unknown_type = Symbol["for"]('unknown_type');

  warn("introduce json, xjson methods for faster copying of known-to-be-ok values");

  warn("reducer keys: '*', '*/*', '**'");

  MULTIMIX = {};

  MULTIMIX.TOOLS = require('./tools');

  MULTIMIX.REDUCERS = require('./reducers');

  MULTIMIX.COPIERS = require('./copiers');

  MULTIMIX.mix = function(L, mixins, reducers, root, selector) {
    var R, S, attributes, copy, description, i, j, len, len1, mixin, mx_key, mx_value, partial_mixin, partial_mixins, rd_key, rd_value, reducer, ref, ref1, seed, seen, tail_mixins, type;
    if (root == null) {
      root = null;
    }
    if (selector == null) {
      selector = [];
    }
    if (mixins.length === 0) {
      return null;
    }
    seed = mixins[0], tail_mixins = 2 <= mixins.length ? slice.call(mixins, 1) : [];
    type = CND.type_of(seed);
    description = (ref = L.type_descriptions[type]) != null ? ref : L.type_descriptions[σ_unknown_type];
    attributes = description.attributes, copy = description.copy;
    seen = new Map();
    R = copy.call(L, seed, seen);
    if ((!attributes) && (tail_mixins.length === 0)) {
      return R;
    }
    throw 'not implemented';
    S = L.REDUCERS[σ_new_state](reducers, seen);
    if (root == null) {
      root = R;
    }

    /* Deal with nested reducers first: */
    for (rd_key in reducers) {
      rd_value = reducers[rd_key];
      if (CND.isa_pod(rd_value)) {
        selector.push(rd_key);
        partial_mixins = [];
        for (i = 0, len = mixins.length; i < len; i++) {
          mixin = mixins[i];
          partial_mixin = mixin[rd_key];
          if (partial_mixin != null) {
            partial_mixins.push(partial_mixin);
          }
        }
        if (partial_mixins.length > 0) {
          R[rd_key] = MULTIMIX.mix(L, partial_mixins, rd_value, root, selector);
        }
        reducers[rd_key] = 'skip';
        selector.pop(rd_key);
      }
    }

    /* Process unnested reducers: */
    for (j = 0, len1 = mixins.length; j < len1; j++) {
      mixin = mixins[j];
      for (mx_key in mixin) {
        mx_value = mixin[mx_key];
        S.path = join.apply(null, slice.call(selector).concat([mx_key]));
        S.root = root;
        S.current = R;
        S.reducer_name = (ref1 = S.reducers[mx_key]) != null ? ref1 : S.reducer_fallback;
        if (L.REDUCERS[σ_reject](S, mx_key, mx_value)) {
          continue;
        }
        if ((reducer = L.REDUCERS[S.reducer_name]) == null) {
          throw new Error("unknown reducer " + (rpr(S.reducer_name)));
        }
        reducer.call(L.REDUCERS, S, mx_key, mx_value);
      }
    }
    L.REDUCERS[σ_finalize](S);
    return R;
  };


  /*
    '[object Object]': copyObject,
    '[object Array]': copyArray,
    '[object Error]': justDont,
    '[object Map]': copyMap,
    '[object Set]': copySet,
  
    '[object Promise]': justDont,
    '[object XMLHttpRequest]': justDont,
    '[object NodeList]': copyArray,
    '[object ArrayBuffer]': copySlice,
    '[object Int8Array]': copyConstructor,
    '[object Uint8Array]': copyConstructor,
    '[object Uint8ClampedArray]': copyConstructor,
    '[object Int16Array]': copyConstructor,
    '[object Uint16Array]': copyConstructor,
    '[object Int32Array]': copyConstructor,
    '[object Uint32Array]': copyConstructor,
    '[object Float32Array]': copyConstructor,
    '[object Float64Array]': copyConstructor
   */

  MULTIMIX.type_descriptions = {
    boolean: {
      type: 'boolean',
      attributes: false,
      copy: MULTIMIX.COPIERS.id
    },
    "null": {
      type: 'null',
      attributes: false,
      copy: MULTIMIX.COPIERS.id
    },
    text: {
      type: 'text',
      attributes: false,
      copy: MULTIMIX.COPIERS.id
    },
    undefined: {
      type: 'undefined',
      attributes: false,
      copy: MULTIMIX.COPIERS.id
    },
    infinity: {
      type: 'infinity',
      attributes: false,
      copy: MULTIMIX.COPIERS.id
    },
    number: {
      type: 'number',
      attributes: false,
      copy: MULTIMIX.COPIERS.id
    },
    nan: {
      type: 'nan',
      attributes: false,
      copy: MULTIMIX.COPIERS.id
    },
    pod: {
      type: 'pod',
      attributes: true,
      copy: MULTIMIX.COPIERS.object
    },
    date: {
      type: 'date',
      attributes: true,
      copy: MULTIMIX.COPIERS.by_constructor
    },
    regex: {
      type: 'regex',
      attributes: true,
      copy: MULTIMIX.COPIERS.by_constructor
    },
    map: {
      type: 'map',
      attributes: true,
      copy: MULTIMIX.COPIERS.dont
    },
    set: {
      type: 'set',
      attributes: true,
      copy: MULTIMIX.COPIERS.dont
    },
    list: {
      type: 'list',
      attributes: true,
      copy: MULTIMIX.COPIERS.dont
    },
    buffer: {
      type: 'buffer',
      attributes: true,
      copy: MULTIMIX.COPIERS.dont
    },
    arraybuffer: {
      type: 'arraybuffer',
      attributes: true,
      copy: MULTIMIX.COPIERS.dont
    },
    error: {
      type: 'error',
      attributes: true,
      copy: MULTIMIX.COPIERS.dont
    },
    "function": {
      type: 'function',
      attributes: true,
      copy: MULTIMIX.COPIERS.dont
    },
    symbol: {
      type: 'symbol',
      attributes: false,
      copy: MULTIMIX.COPIERS.dont
    },
    weakmap: {
      type: 'weakmap',
      attributes: false,
      copy: MULTIMIX.COPIERS.dont
    },
    generator: {
      type: 'generator',
      attributes: false,
      copy: MULTIMIX.COPIERS.dont
    },
    "arguments": {
      type: 'arguments',
      attributes: false,
      copy: MULTIMIX.COPIERS.dont
    },
    global: {
      type: 'global',
      attributes: false,
      copy: MULTIMIX.COPIERS.dont
    }
  };

  MULTIMIX.type_descriptions[σ_unknown_type] = {
    type: σ_unknown_type,
    attributes: false,
    copy: MULTIMIX.COPIERS.dont
  };

  MULTIMIX.use = function() {
    var R, custom_reducers, reducers;
    custom_reducers = 1 <= arguments.length ? slice.call(arguments, 0) : [];

    /* Returns a version of `mix` that uses the reducers passed in to `use`; the resulting reducer is
    derived from the reducers list by applying `mix`. Turtles.
     */
    custom_reducers.splice(0, 0, {
      '*': 'assign'
    });

    /* for the time being
    reducers            = MULTIMIX.mix MULTIMIX, custom_reducers, null
     */
    reducers = custom_reducers;
    R = function() {
      var mixins;
      mixins = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      return MULTIMIX.mix(R, mixins, reducers);
    };
    R.TOOLS = MULTIMIX.TOOLS;
    R.REDUCERS = MULTIMIX.REDUCERS;
    R.COPIERS = MULTIMIX.COPIERS;
    R.type_descriptions = MULTIMIX.type_descriptions;
    R.use = MULTIMIX.use;
    return R;
  };

  module.exports = {
    mix: MULTIMIX.use()
  };

}).call(this);

//# sourceMappingURL=main.js.map
