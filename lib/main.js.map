{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/main.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nGUY                       = require 'guy'\n{ alert\n  debug\n  help\n  info\n  plain\n  praise\n  urge\n  warn\n  whisper }               = GUY.trm.get_loggers 'MULTIMIX'\n{ rpr\n  inspect\n  echo\n  log     }               = GUY.trm\n{ get\n  hide }                  = GUY.props\n{ freeze }                = GUY.lft\nrvr                       = GUY.trm.reverse\ntruth                     = GUY.trm.truth.bind GUY.trm\nnode_inspect              = Symbol.for 'nodejs.util.inspect.custom'\nnameit                    = ( name, f ) -> Object.defineProperty f, 'name', { value: name, }\nH                         = {}\nE                         = require './errors'\nmultimix_symbol           = Symbol 'multimix'\nstringtag_symbol          = Symbol.toStringTag\niterator_symbol           = Symbol.iterator\nnosuchvalue               = Symbol 'nosuchvalue'\n\n\n#===========================================================================================================\nget_types = ->\n  return R if ( R = H.types )?\n\n  #---------------------------------------------------------------------------------------------------------\n  { Intertype }             = require 'intertype'\n  types                     = new Intertype()\n\n  #---------------------------------------------------------------------------------------------------------\n  types.declare.hdg_new_hedge_cfg\n    $handler:     'function'\n    $hub:         'optional.function.or.object'\n    # $state:       'optional.object'\n    $create:      'boolean.or.function'\n    $strict:      'boolean'\n    $oneshot:     'boolean'\n    $deletion:    'boolean'\n    $hide:        'boolean'\n    extras:       false\n    default:\n      hub:        null\n      handler:    null\n      # state:      null\n      create:     null\n      strict:     false\n      oneshot:    false\n      deletion:   true\n      hide:       true\n\n  #---------------------------------------------------------------------------------------------------------\n  return types\n\n#===========================================================================================================\nclass @Multimix\n\n  @symbol:  multimix_symbol\n  @states:  new WeakMap()\n  @state:   GUY.lft.freeze { hedges: [], }\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ( cfg ) ->\n    ### TAINT bug in Intertype::create() / Intertype::validate(), returns `true` instead of input value ###\n    # cfg     = create.hdg_new_hedge_cfg cfg\n    #.......................................................................................................\n    ### TAINT temporary code to avoid faulty `Intertype::validate` ###\n    ### NOTE use `create` when `validate` is fixed ###\n    ### TAINT circular dependency Intertype <--> GUY.props.Hedge ??? ###\n    hide @, 'types', get_types()\n    cfg         = { cfg..., }\n    cfg.hub    ?= @\n    cfg.create ?= not cfg.strict\n    cfg         = { @types.isa.hdg_new_hedge_cfg.default..., cfg..., }\n    clasz       = @constructor\n    throw new E.Multimix_cfg_error '^mmx.ctor<@1^', \"need handler, got #{rpr cfg.handler}\" unless @types.isa.function cfg.handler\n    throw new E.Multimix_cfg_error '^mmx.ctor<@2^', \"expected boolean or function\"         unless @types.isa.boolean.or.function cfg.create\n    throw new E.Multimix_cfg_error '^mmx.ctor<@3^', \"expected boolean\"                     unless @types.isa.boolean cfg.strict\n    throw new E.Multimix_cfg_error '^mmx.ctor<@4^', \"cannot set both `create` and `strict`\" if cfg.strict and ( cfg.create isnt false )\n    throw new E.Multimix_cfg_error '^mmx.ctor<@5^', \"expected boolean\"                     unless @types.isa.boolean cfg.oneshot\n    #.......................................................................................................\n    @[ key ] = cfg[ key ] for key of @types.isa.hdg_new_hedge_cfg.default\n    #.......................................................................................................\n    ### set `@state` to a value shared by all Multimix instances with the same `hub`: ###\n    if ( state = clasz.states.get @hub )? then  @state                        = state\n    else                                        clasz.states.set @hub, @state = { clasz.state..., }\n    #.......................................................................................................\n    R = @_get_proxy true, ( P... ) => @handler.call @hub, [], P...\n    for key, descriptor of Object.getOwnPropertyDescriptors @handler\n      continue if key is 'prototype'\n      Object.defineProperty R, key, descriptor\n    return R\n\n  #---------------------------------------------------------------------------------------------------------\n  _get_proxy: ( is_top, handler ) ->\n    clasz = @constructor\n    dsc   =\n      #-----------------------------------------------------------------------------------------------------\n      get: ( target, key ) =>\n        switch key\n          when  multimix_symbol     then return @\n          when  stringtag_symbol    then return \"#{target.constructor.name}\"\n          when  'constructor'       then return target.constructor\n          when  'toString'          then return target.toString\n          when  'call'              then return target.call\n          when  'apply'             then return target.apply\n          when  iterator_symbol     then return target[ Symbol.iterator  ]\n          when  node_inspect        then return target[ node_inspect     ]\n          ### NOTE necessitated by behavior of `node:util.inspect()`: ###\n          when  '0'                 then return target[ 0                ]\n        #...................................................................................................\n        if is_top then  @state.hedges = [ key, ]\n        else            @state.hedges.push key\n        dsc.apply = ( target, self, P ) => @handler.call self, [ @state.hedges..., ], P...\n        #...................................................................................................\n        # @handler @state.hedges ### put call for prop access here ###\n        return R if ( R = get target, key, nosuchvalue ) isnt nosuchvalue\n        throw new E.Multimix_no_such_property '^mmx.proxy.get@1^', key if @strict\n        return undefined if @create is false\n        hedges  = [ @state.hedges..., ]\n        if @create is true then handler = @handler\n        else @create key, target; return target[ key ]\n        #...................................................................................................\n        proxy = @_get_proxy false, nameit key, ( P... ) =>\n          ### put code for tracing here ###\n          R = handler.call @hub, hedges, P...\n          @state.hedges = []\n          return R\n        if @hide then ( hide target, key, proxy ) else target[ key ] = proxy\n        return proxy\n      #-----------------------------------------------------------------------------------------------------\n      set: ( target, key, value ) =>\n        if @oneshot and ( get target, key, nosuchvalue ) isnt nosuchvalue\n          throw new E.Multimix_reassignment_error '^mmx.proxy.set@1^', key\n        return target[ key ] = value\n      #-----------------------------------------------------------------------------------------------------\n      deleteProperty: ( target, key ) =>\n        unless @deletion\n          throw new E.Multimix_deletion_error '^mmx.proxy.set@1^', key\n        return delete target[ key ]\n    #.......................................................................................................\n    R = new Proxy handler, dsc\n\n\n"
  ]
}