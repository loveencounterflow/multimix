{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/main.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'MULTIMIX'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\n{ join }                  = require 'path'\n#...........................................................................................................\nσ_new_state               = Symbol.for 'new_state'\nσ_reject                  = Symbol.for 'reject'\nσ_finalize                = Symbol.for 'finalize'\nσ_unknown_type            = Symbol.for 'unknown_type'\n#...........................................................................................................\nMULTIMIX                  = {}\nMULTIMIX.TOOLS            = require './tools'\nMULTIMIX.RECIPES          = require './recipes'\nMULTIMIX.COPIERS          = require './copiers'\ntypes                     = require './types'\n{ isa\n  type_of }               = types.export()\n\n\n\n#-----------------------------------------------------------------------------------------------------------\nMULTIMIX._get_seed = ( S, seed ) ->\n  type          = type_of seed\n  description   = MULTIMIX.COPIERS.type_descriptions[ type ]\n  description  ?= MULTIMIX.COPIERS.type_descriptions[ σ_unknown_type ]\n  { has_fields\n    copy      } = description\n  return copy.call MULTIMIX, S, seed\n\n#-----------------------------------------------------------------------------------------------------------\nMULTIMIX.mix = ( mixins, recipe, root = null, selector = [] ) ->\n  #.........................................................................................................\n  return null if mixins.length is 0\n  [ mixin_seed\n    mixin_tail... ]   = mixins\n  S                   = MULTIMIX.RECIPES[ σ_new_state ] recipe, mixins\n  seed                = MULTIMIX._get_seed S, mixin_seed\n  S.seed              = seed\n  root               ?= seed\n  # ### !!! experimental !!! ###\n  # for mixin, mixin_idx in mixins\n  #   mixins[ mixin_idx ] = { '': mixin, }\n  #.........................................................................................................\n  ### TAINT this part needs to be rewritten ###\n  ### Deal with nested recipe first: ###\n  if ( fields = S.recipe[ 'fields' ] )?\n    for field_key, field_value of fields\n      continue unless isa.object field_value\n      selector.push field_key\n      partial_mixins = ( mixin[ field_key ] for mixin in mixins when mixin[ field_key ] )\n      # partial_mixins = []\n      # for mixin in mixins\n      #   partial_mixin = mixin[ field_key ]\n      #   partial_mixins.push partial_mixin if partial_mixin?\n      if partial_mixins.length > 0\n        # debug '30211', selector, field_value, partial_mixins\n        S.seed[ field_key ] = MULTIMIX.mix partial_mixins, field_value, root, selector\n      S.recipe[ field_key ] = 'skip'\n      selector.pop field_key\n  #.........................................................................................................\n  ### Process unnested recipe: ###\n  for mixin in mixins\n    # urge '33415', mixin\n    for mx_key, mx_value of mixin\n      S.path          = join selector..., mx_key\n      S.root          = root\n      S.current       = S.seed\n      S.recipe_name   = S.recipe[ 'fields' ]?[ mx_key ] ? S.recipe_fallback\n      continue if isa.object S.recipe_name\n      continue if MULTIMIX.RECIPES[ σ_reject ] S, mx_key, mx_value\n      unless ( recipe = MULTIMIX.RECIPES[ S.recipe_name ] )?\n        throw new Error \"unknown recipe #{rpr S.recipe_name}\"\n      recipe.call MULTIMIX.RECIPES, S, mx_key, mx_value\n  #.........................................................................................................\n  MULTIMIX.RECIPES[ σ_finalize ] S\n  #.........................................................................................................\n  if ( hook = S.recipe?[ 'after' ] )?\n    unless ( type = type_of hook ) is 'function'\n      throw new Error \"expected function for 'after' hook, got a #{type}\"\n    hook S\n  #.........................................................................................................\n  # S.path    = null\n  # S.root    = null\n  # S.current = null\n  # debug '30221', S\n  return S.seed\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\nMULTIMIX.use = ( recipes... ) ->\n  recipes.splice 0, 0, { 'fallback': 'assign', }\n  recipe              = MULTIMIX.mix recipes\n  R                   = ( mixins... ) -> MULTIMIX.mix mixins, recipe\n  R.use               = MULTIMIX.use\n  # R.TOOLS             = MULTIMIX.TOOLS\n  # R.RECIPES           = MULTIMIX.RECIPES\n  # R.COPIERS           = MULTIMIX.COPIERS\n  # R.type_descriptions = MULTIMIX.type_descriptions\n  # R._get_seed         = MULTIMIX._get_seed\n  # R.deep_copy         = ( x ) -> CND.deep_copy x\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\nmodule.exports = { mix: MULTIMIX.use(), }\n\n\n\n\n\n\n\n\n"
  ]
}