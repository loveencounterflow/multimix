{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/main.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n\n############################################################################################################\nGUY                       = require 'guy'\n{ alert\n  debug\n  help\n  info\n  plain\n  praise\n  urge\n  warn\n  whisper }               = GUY.trm.get_loggers 'GUY/demo-guy-hedgerows'\n{ rpr\n  inspect\n  echo\n  log     }               = GUY.trm\nrvr                       = GUY.trm.reverse\ntruth                     = GUY.trm.truth.bind GUY.trm\n{ Intertype }             = require 'intertype'\ntypes                     = new Intertype()\n{ declare\n  create\n  isa\n  validate  }             = types\nnode_inspect              = Symbol.for 'nodejs.util.inspect.custom'\nnameit                    = ( name, f ) -> Object.defineProperty f, 'name', { value: name, }\n\n\n#-----------------------------------------------------------------------------------------------------------\ndeclare.hdg_new_hedge_cfg\n  $handler:     'function'\n  $hub:         'optional.function.or.object'\n  $state:       'optional.object'\n  default:\n    hub:        null\n    handler:    null\n    state:      null\n\n\n#-----------------------------------------------------------------------------------------------------------\nclass Hedge\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ( cfg ) ->\n    ### TAINT bug in Intertype::create() / Intertype::validate(), returns `true` instead of input value ###\n    # cfg     = create.hdg_new_hedge_cfg cfg\n    # urge '^345^', rvr cfg\n    #.......................................................................................................\n    ### TAINT temporary code to avoid faulty `Intertype::validate` ###\n    ### NOTE use `create` when `validate` is fixed ###\n    ### TAINT circular dependency Intertype <--> GUY.props.Hedge ??? ###\n    cfg       = { isa.hdg_new_hedge_cfg.default..., cfg..., }\n    throw new Error \"^343^ need handler, got #{rpr cfg.handler}\" unless isa.function cfg.handler\n    #.......................................................................................................\n    @hub      = cfg.hub ? null\n    @handler  = cfg.handler # .bind @hub\n    @state    = cfg.state ? { hedges: null, }\n    R         = @_get_hedge_proxy true, @handler\n    return R\n\n  #---------------------------------------------------------------------------------------------------------\n  _get_hedge_proxy: ( is_top, handler ) ->\n    dsc =\n      #-----------------------------------------------------------------------------------------------------\n      get: ( target, key ) =>\n        return \"#{target.constructor.name}\"   if key is Symbol.toStringTag\n        return target.constructor             if key is 'constructor'\n        return target.toString                if key is 'toString'\n        return target.call                    if key is 'call'\n        return target.apply                   if key is 'apply'\n        return target[ Symbol.iterator  ]     if key is Symbol.iterator\n        return target[ node_inspect     ]     if key is node_inspect\n        ### NOTE necessitated by behavior of `node:util.inspect()`: ###\n        return target[ 0                ]     if key is '0'\n        # whisper '^450-1^', { target, key, }\n        #...................................................................................................\n        if is_top then  @state.hedges = [ key, ]\n        else            @state.hedges.push key\n        #...................................................................................................\n        ### put call for prop access here: ###\n        # @handler @state.hedges\n        return R if ( R = target[ key ] ) isnt undefined\n        hedges        = [ @state.hedges..., ]\n        #...................................................................................................\n        sub_handler = nameit key, ( P... ) =>\n          whisper '^450-2^', \"call with\", { hedges, P, }\n          return @handler hedges, P...\n        return target[ key ] ?= @_get_hedge_proxy false, sub_handler\n    #.......................................................................................................\n    R = new Proxy handler, dsc\n\n\n############################################################################################################\nif module is require.main then do =>\n\n  #=========================================================================================================\n  paragons =\n\n    #-------------------------------------------------------------------------------------------------------\n    isa: ( hedges, x ) ->\n      # if arguments.length < 2\n      #   debug '^450-3^', \"`isa()` called with no argument; leaving\"\n      #   return null\n      unless ( arity = arguments.length ) is 2\n        throw new Error \"^387^ expected single argument, got #{arity - 1}\"\n      ### TAINT very much simplified version of `Intertype::_inner_isa()` ###\n      # return isa[ hedge ] x\n      whisper '^450-4^', { hedges, x, }\n      for hedge in hedges\n        R = @isa[ hedge ] is false\n        whisper '^450-5^', { R, hedge, handler: @isa[ hedge ], x, }\n        return false if R is false\n        return R unless R is true\n      return true\n\n    #-------------------------------------------------------------------------------------------------------\n    declare: ( hedges, isa ) ->\n      # if arguments.length < 2\n      #   debug '^450-6^', \"`declare()` called with no argument; leaving\"\n      #   return null\n      # unless ( arity = arguments.length ) is 1\n      #   throw new Error \"^387^ expected no arguments, got #{arity - 1}\"\n      ### TAINT also check for hedges being a list ###\n      unless ( hedgecount = hedges.length ) is 1\n        throw new Error \"^387^ expected single hedge, got #{rpr hedges}\"\n      [ name, ] = hedges\n      ### NOTE here chance to add tracing ###\n      handler = ( x ) => isa.call @, x\n      @isa[ name ] = nameit name, new Hedge { state: @state, hub: @, handler, }\n      return true\n\n  #=========================================================================================================\n  class Intertype\n\n    #-------------------------------------------------------------------------------------------------------\n    constructor: ( cfg ) ->\n      # GUY_props.hide @, 'isa', new Hedge\n      @state    = { hedges: null, }\n      @isa      = nameit 'isa',     new Hedge { state: @state, hub: @, handler: ( paragons.isa.bind      @ ), }\n      @declare  = nameit 'declare', new Hedge { state: @state, hub: @, handler: ( paragons.declare.bind  @ ), }\n      # debug '^450-10^', rvr @\n      return undefined\n\n  #=========================================================================================================\n  do =>\n    handler = ( hedges, P... ) -> [ hedges..., P..., ]\n    hub = new Hedge { handler, }\n    info '^450-24^', hub.one.two.three.four.five 5\n    return null\n  #=========================================================================================================\n  do =>\n    types = new Intertype()\n    info '^450-25^', types\n    info '^450-26^', types.isa\n    info '^450-27^', types.declare\n    info '^450-28^', types.declare.one\n    info '^450-29^', types.declare.one ( x ) -> ( x is 1 ) or ( x is '1' )\n    info '^450-31^', types.isa.one 1\n    info '^450-32^', types.isa.one '1'\n    info '^450-33^', types.isa.one 2\n    return null\n  #---------------------------------------------------------------------------------------------------------\n  return null\n"
  ]
}