{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/main.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nGUY                       = require 'guy'\n{ alert\n  debug\n  help\n  info\n  plain\n  praise\n  urge\n  warn\n  whisper }               = GUY.trm.get_loggers 'GUY/demo-guy-hedgerows'\n{ rpr\n  inspect\n  echo\n  log     }               = GUY.trm\nrvr                       = GUY.trm.reverse\ntruth                     = GUY.trm.truth.bind GUY.trm\nnode_inspect              = Symbol.for 'nodejs.util.inspect.custom'\nnameit                    = ( name, f ) -> Object.defineProperty f, 'name', { value: name, }\nH                         = {}\n\n#===========================================================================================================\nget_types = ->\n  return R if ( R = H.types )?\n\n  #---------------------------------------------------------------------------------------------------------\n  { Intertype }             = require 'intertype'\n  types                     = new Intertype()\n\n  #---------------------------------------------------------------------------------------------------------\n  types.declare.hdg_new_hedge_cfg\n    $handler:     'function'\n    $hub:         'optional.function.or.object'\n    $state:       'optional.object'\n    default:\n      hub:        null\n      handler:    null\n      state:      null\n\n  #---------------------------------------------------------------------------------------------------------\n  return types\n\n#===========================================================================================================\nclass @Multimix\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ( cfg ) ->\n    ### TAINT bug in Intertype::create() / Intertype::validate(), returns `true` instead of input value ###\n    # cfg     = create.hdg_new_hedge_cfg cfg\n    # urge '^345^', rvr cfg\n    #.......................................................................................................\n    ### TAINT temporary code to avoid faulty `Intertype::validate` ###\n    ### NOTE use `create` when `validate` is fixed ###\n    ### TAINT circular dependency Intertype <--> GUY.props.Hedge ??? ###\n    @types    = get_types()\n    cfg       = { @types.isa.hdg_new_hedge_cfg.default..., cfg..., }\n    throw new Error \"^343^ need handler, got #{rpr cfg.handler}\" unless @types.isa.function cfg.handler\n    #.......................................................................................................\n    @hub      = cfg.hub ? null\n    @handler  = cfg.handler # .bind @hub\n    @state    = cfg.state ? { hedges: null, }\n    R         = @_get_hedge_proxy true, @handler\n    return R\n\n  #---------------------------------------------------------------------------------------------------------\n  _get_hedge_proxy: ( is_top, handler ) ->\n    dsc =\n      #-----------------------------------------------------------------------------------------------------\n      get: ( target, key ) =>\n        return \"#{target.constructor.name}\"   if key is Symbol.toStringTag\n        return target.constructor             if key is 'constructor'\n        return target.toString                if key is 'toString'\n        return target.call                    if key is 'call'\n        return target.apply                   if key is 'apply'\n        return target[ Symbol.iterator  ]     if key is Symbol.iterator\n        return target[ node_inspect     ]     if key is node_inspect\n        ### NOTE necessitated by behavior of `node:util.inspect()`: ###\n        return target[ 0                ]     if key is '0'\n        # whisper '^450-1^', { target, key, }\n        #...................................................................................................\n        if is_top then  @state.hedges = [ key, ]\n        else            @state.hedges.push key\n        #...................................................................................................\n        ### put call for prop access here: ###\n        # @handler @state.hedges\n        return R if ( R = target[ key ] ) isnt undefined\n        hedges        = [ @state.hedges..., ]\n        #...................................................................................................\n        sub_handler = nameit key, ( P... ) =>\n          whisper '^450-2^', \"call with\", { hedges, P, }\n          return @handler hedges, P...\n        return target[ key ] ?= @_get_hedge_proxy false, sub_handler\n    #.......................................................................................................\n    R = new Proxy handler, dsc\n\n\n"
  ]
}