{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/main.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nGUY                       = require 'guy'\n{ alert\n  debug\n  help\n  info\n  plain\n  praise\n  urge\n  warn\n  whisper }               = GUY.trm.get_loggers 'GUY/demo-guy-hedgerows'\n{ rpr\n  inspect\n  echo\n  log     }               = GUY.trm\nrvr                       = GUY.trm.reverse\ntruth                     = GUY.trm.truth.bind GUY.trm\nnode_inspect              = Symbol.for 'nodejs.util.inspect.custom'\nnameit                    = ( name, f ) -> Object.defineProperty f, 'name', { value: name, }\nH                         = {}\n\n#===========================================================================================================\nget_types = ->\n  return R if ( R = H.types )?\n\n  #---------------------------------------------------------------------------------------------------------\n  { Intertype }             = require 'intertype'\n  types                     = new Intertype()\n\n  #---------------------------------------------------------------------------------------------------------\n  types.declare.hdg_new_hedge_cfg\n    $handler:     'function'\n    $hub:         'optional.function.or.object'\n    $state:       'optional.object'\n    default:\n      hub:        null\n      handler:    null\n      state:      null\n\n  #---------------------------------------------------------------------------------------------------------\n  return types\n\n#===========================================================================================================\nclass @Multimix\n\n  @symbol:  Symbol 'multimix'\n  @states:  new WeakMap()\n  @state:   GUY.lft.freeze { hedges: null, }\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ( cfg ) ->\n    ### TAINT bug in Intertype::create() / Intertype::validate(), returns `true` instead of input value ###\n    # cfg     = create.hdg_new_hedge_cfg cfg\n    # urge '^345^', rvr cfg\n    #.......................................................................................................\n    ### TAINT temporary code to avoid faulty `Intertype::validate` ###\n    ### NOTE use `create` when `validate` is fixed ###\n    ### TAINT circular dependency Intertype <--> GUY.props.Hedge ??? ###\n    @types    = get_types()\n    cfg       = { @types.isa.hdg_new_hedge_cfg.default..., cfg..., }\n    clasz     = @constructor\n    throw new Error \"^343^ need handler, got #{rpr cfg.handler}\" unless @types.isa.function cfg.handler\n    #.......................................................................................................\n    ### set `@state` to a value shared by all Multimix instances with the same `hub`: ###\n    if cfg.hub?\n      @hub      = cfg.hub\n      if ( state = clasz.states.get @hub )? then  @state                        = state\n      else                                        clasz.states.set @hub, @state = { clasz.states..., }\n    else\n      @state = { clasz.states..., }\n    #.......................................................................................................\n    @handler  = cfg.handler # .bind @hub\n    # @state    = cfg.state ? { hedges: null, }\n    R         = @_get_hedge_proxy true, @handler\n    return R\n\n  #---------------------------------------------------------------------------------------------------------\n  _get_hedge_proxy: ( is_top, handler ) ->\n    clasz = @constructor\n    dsc   =\n      #-----------------------------------------------------------------------------------------------------\n      get: ( target, key ) =>\n        switch key\n          when  clasz.symbol        then return @\n          when  Symbol.toStringTag  then return \"#{target.constructor.name}\"\n          when  'constructor'       then return target.constructor\n          when  'toString'          then return target.toString\n          when  'call'              then return target.call\n          when  'apply'             then return target.apply\n          when  Symbol.iterator     then return target[ Symbol.iterator  ]\n          when  node_inspect        then return target[ node_inspect     ]\n          ### NOTE necessitated by behavior of `node:util.inspect()`: ###\n          when  '0'                 then return target[ 0                ]\n        #...................................................................................................\n        if is_top then  @state.hedges = [ key, ]\n        else            @state.hedges.push key\n        #...................................................................................................\n        # @handler @state.hedges ### put call for prop access here ###\n        return R if ( R = target[ key ] ) isnt undefined\n        hedges = [ @state.hedges..., ]\n        #...................................................................................................\n        sub_handler = nameit key, ( P... ) =>\n          whisper '^450-2^', \"call with\", { hedges, P, }\n          return @handler hedges, P...\n        return target[ key ] ?= @_get_hedge_proxy false, sub_handler\n    #.......................................................................................................\n    R = new Proxy handler, dsc\n\n\n"
  ]
}