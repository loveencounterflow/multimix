{
  "version": 3,
  "file": "main.js",
  "sourceRoot": "..",
  "sources": [
    "src/main.coffee"
  ],
  "names": [],
  "mappings": ";AACA;EAAA;AAAA,MAAA,GAAA,EAAA,QAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,IAAA,EAAA,IAAA,EAAA,eAAA,EAAA,GAAA,EAAA,IAAA,EAAA,IAAA,EAAA,OAAA;IAAA,oBAAA;;;EAGA,GAAA,GAA4B,OAAA,CAAQ,KAAR;;EAC5B,GAAA,GAA4B,GAAG,CAAC;;EAChC,KAAA,GAA4B;;EAC5B,KAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,OAAf,EAA4B,KAA5B;;EAC5B,KAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,OAAf,EAA4B,KAA5B;;EAC5B,OAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,SAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B,EAZ5B;;;;;;;;EAqBA,eAAA,GAAkB,CAAE,UAAF,EAAc,UAAd;;EAGZ;;IAAN,MAAA,SAAA,CAAA;;MAGW,OAAR,MAAQ,CAAE,MAAF,EAAU,WAAW,IAArB,CAAA;AACX,YAAA,GAAA,EAAA,GAAA,EAAA;QACI,QAAA,GAAW,CAAE,GAAA;YAAE,SAAA,EAAW;UAAb,CAAF,EAA2B,GAAA,oBAAE,WAAW,IAAb,CAA3B;QACX,KAAA,aAAA;;6BAAyC,iBAAX;;;UAC5B,IAAG,CAAE,CAAI,QAAQ,CAAC,SAAf,CAAA,IAA+B,CAAE,6BAAA,IAAe,mBAAjB,CAAlC;YACE,MAAM,IAAI,KAAJ,CAAU,CAAA,oEAAA,CAAA,CAAuE,GAAA,CAAI,GAAJ,CAAvE,CAAA,CAAV,EADR;;UAEA,IAAC,CAAE,GAAF,CAAD,GAAW;QAHb;;aAIe,CAAE,KAAjB,CAAuB,IAAvB;;AACA,eAAO;MARA,CADX;;;MAYY,OAAT,OAAS,CAAE,MAAF,EAAU,WAAW,IAArB,CAAA;AACZ,YAAA,GAAA,EAAA,GAAA,EAAA;QACI,QAAA,GAAW,CAAE,GAAA;YAAE,SAAA,EAAW;UAAb,CAAF,EAA2B,GAAA,oBAAE,WAAW,IAAb,CAA3B;QACX,KAAA,aAAA;;6BAAyC,iBAAX;;;UAC5B,IAAG,CAAE,CAAI,QAAQ,CAAC,SAAf,CAAA,IAA+B,CAAE,6BAAA,IAAe,mBAAjB,CAAlC;YACE,MAAM,IAAI,KAAJ,CAAU,CAAA,oEAAA,CAAA,CAAuE,GAAA,CAAI,GAAJ,CAAvE,CAAA,CAAV,EADR;WAAN;;UAGM,IAAC,CAAA,SAAE,CAAE,GAAF,CAAH,GAAa;QAJf;;aAKe,CAAE,KAAjB,CAAuB,IAAvB;;AACA,eAAO;MATC,CAZZ;;;MAwBE,MAAQ,CAAE,SAAS,IAAX,CAAA,EAAA;;AACV,YAAA,CAAA,EAAA,CAAA,EAAA,GAAA,EAAA,IAAA,EAAA;QACI,CAAA,oBAAI,SAAS,CAAA;AACb;QAAA,KAAA,QAAA;;UACE,IAAO,qCAAP;YACE,CAAC,CAAE,CAAF,CAAD,GAAS,EADX;WAAA,MAEK,8DAAyC,KAAzC;YACH,CAAC,CAAE,CAAF,CAAD,GAAS,QAAQ,CAAC,mBAAT,CAA6B,IAA7B,EAAgC,CAAhC,EADN;WAAA,MAAA;YAGH,CAAC,CAAE,CAAF,CAAD,GAAS,CAAC,CAAC,IAAF,CAAO,IAAP,EAHN;;QAHP;AAOA,eAAO;MAVD,CAxBV;;;;;MAuCyB,OAAtB,mBAAsB,CAAE,WAAF,EAAe,CAAf,CAAA;AACzB,YAAA;QAAI,CAAA,GAAI,IAAI,KAAJ,CAAY,CAAC,CAAC,IAAF,CAAO,WAAP,CAAZ,EACF;UAAA,GAAA,EAAK,QAAA,CAAE,MAAF,EAAU,GAAV,CAAA;YACH,IAAwB,QAAS,MAAjC;AAAA,qBAAO,MAAM,CAAE,GAAF,EAAb;;YACA,IAAwB,CAAE,QAAQ,CAAC,UAAT,CAAoB,GAApB,CAAF,CAAA,KAA+B,QAAvD;AAAA,qBAAO,MAAM,CAAE,GAAF,EAAb;;AACA,mBAAO,QAAA,CAAA,GAAE,EAAF,CAAA;qBAAa,MAAA,CAAO,GAAP,EAAY,GAAA,EAAZ;YAAb;UAHJ;QAAL,CADE;QAKJ,CAAC,CAAE,QAAQ,CAAC,mBAAX,CAAD,GAAoC;AACpC,eAAO;MAPc,CAvCzB;;;MAiDgB,OAAb,UAAa,CAAE,CAAF,CAAA;AAAS,eAAO,CAAE,CAAE,MAAM,CAAA,SAAE,CAAA,QAAQ,CAAC,IAAjB,CAAsB,CAAtB,CAAF,CAA2B,CAAC,KAA5B,CAAkC,CAAlC,EAAqC,CAAC,CAAtC,CAAF,CAA2C,CAAC,WAA5C,CAAA;MAAhB;;IAnDhB;;IAoDE,QAAC,CAAA,mBAAD,GAAuB,MAAA,CAAO,OAAP;;;;gBA5EzB;;;EAgFA,MAAM,CAAC,OAAP,GAAiB;AAhFjB",
  "sourcesContent": [
    "\n'use strict'\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'MULTIMIX/main'\ndebug                     = CND.get_logger 'debug',     badge\nalert                     = CND.get_logger 'alert',     badge\nwhisper                   = CND.get_logger 'whisper',   badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\ninfo                      = CND.get_logger 'info',      badge\n\n\n#===========================================================================================================\n# MODULE METACLASS provides static methods `@extend()`, `@include()`\n#-----------------------------------------------------------------------------------------------------------\n### The little dance around the module_keywords variable is to ensure we have callback support when mixins\nextend a class. See https://arcturo.github.io/library/coffeescript/03_classes.html ###\n#-----------------------------------------------------------------------------------------------------------\nmodule_keywords = [ 'extended', 'included', ]\n\n#===========================================================================================================\nclass Multimix\n\n  #---------------------------------------------------------------------------------------------------------\n  @extend: ( object, settings = null ) ->\n    ### TAINT code duplication ###\n    settings = { { overwrite: true, }..., ( settings ? null )..., }\n    for key, value of object when key not in module_keywords\n      if ( not settings.overwrite ) and ( @::[ key ]? or @[ key ]? )\n        throw new Error \"^multimix/include@5684 overwrite set to false but name already set: #{rpr key}\"\n      @[ key ] = value\n    object.extended?.apply @\n    return @\n\n  #---------------------------------------------------------------------------------------------------------\n  @include: ( object, settings = null ) ->\n    ### TAINT code duplication ###\n    settings = { { overwrite: true, }..., ( settings ? null )..., }\n    for key, value of object when key not in module_keywords\n      if ( not settings.overwrite ) and ( @::[ key ]? or @[ key ]? )\n        throw new Error \"^multimix/include@5683 overwrite set to false but name already set: #{rpr key}\"\n      # Assign properties to the prototype\n      @::[ key ] = value\n    object.included?.apply @\n    return @\n\n  #---------------------------------------------------------------------------------------------------------\n  export: ( target = null ) ->\n    ### Return an object with methods, bound to the current instance. ###\n    R = target ? {}\n    for k, v of @\n      unless v?.bind?\n        R[ k ] = v\n      else if ( v[ Multimix.isa_keymethod_proxy ] ? false )\n        R[ k ] = Multimix.get_keymethod_proxy @, v\n      else\n        R[ k ] = v.bind @\n    return R\n\n  #=========================================================================================================\n  # KEYMETHOD FACTORY\n  #---------------------------------------------------------------------------------------------------------\n  @get_keymethod_proxy = ( bind_target, f ) ->\n    R = new Proxy ( f.bind bind_target ),\n      get: ( target, key ) ->\n        return target[ key ] if key in [ 'bind', ] # ... other properties ...\n        return target[ key ] if ( Multimix.js_type_of key ) is 'symbol'\n        return ( xP... ) -> target key, xP...\n    R[ Multimix.isa_keymethod_proxy ] = true\n    return R\n\n  #=========================================================================================================\n  @js_type_of = ( x ) -> return ( ( Object::toString.call x ).slice 8, -1 ).toLowerCase()\n  @isa_keymethod_proxy = Symbol 'proxy'\n\n\n############################################################################################################\nmodule.exports = Multimix\n\n\n"
  ]
}