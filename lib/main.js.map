{
  "version": 3,
  "file": "main.js",
  "sourceRoot": "..",
  "sources": [
    "src/main.coffee"
  ],
  "names": [],
  "mappings": ";AACA;EAAA;AAAA,MAAA,GAAA,EAAA,QAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,IAAA,EAAA,IAAA,EAAA,eAAA,EAAA,GAAA,EAAA,IAAA,EAAA,IAAA,EAAA,OAAA;IAAA,oBAAA;;;EAGA,GAAA,GAA4B,OAAA,CAAQ,KAAR;;EAC5B,GAAA,GAA4B,GAAG,CAAC;;EAChC,KAAA,GAA4B;;EAC5B,KAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,OAAf,EAA4B,KAA5B;;EAC5B,KAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,OAAf,EAA4B,KAA5B;;EAC5B,OAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,SAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B,EAZ5B;;;;;;;;EAqBA,eAAA,GAAkB,CAAE,UAAF,EAAc,UAAd;;EAGZ;;IAAN,MAAA,SAAA,CAAA;;MAGW,OAAR,MAAQ,CAAE,MAAF,CAAA;AACP,YAAA,GAAA,EAAA,GAAA,EAAA;QAAA,KAAA,aAAA;;cAA8B,aAAW,eAAX,EAAA,GAAA;YAC5B,IAAG,CAAA,GAAA,CAAH,GAAW;;QADb;;aAEe,CAAE,KAAjB,CAAuB,IAAvB;;AACA,eAAO;MAJA,CAAT;;;MAOU,OAAT,OAAS,CAAE,MAAF,CAAA;AACR,YAAA,GAAA,EAAA,GAAA,EAAA;QAAA,KAAA,aAAA;;cAA8B,aAAW,eAAX,EAAA,GAAA;;YAE5B,IAAC,CAAA,SAAI,CAAA,GAAA,CAAL,GAAa;;QAFf;;aAGe,CAAE,KAAjB,CAAuB,IAAvB;;AACA,eAAO;MALC,CAPV;;;MAeA,MAAQ,CAAE,SAAS,IAAX,CAAA,EAAA;;AAEN,YAAA,CAAA,EAAA,CAAA,EAAA,GAAA,EAAA,IAAA,EAAA;QAAA,CAAA,oBAAI,SAAS,CAAA;AACb;QAAA,KAAA,QAAA;;UACE,IAAgB,qCAAhB;AAAA,qBAAA;;UACA,8DAAyC,KAAzC;YACE,CAAG,CAAA,CAAA,CAAH,GAAS,QAAQ,CAAC,mBAAT,CAA6B,IAA7B,EAAgC,CAAhC,EADX;WAAA,MAAA;YAGE,CAAG,CAAA,CAAA,CAAH,GAAS,CAAC,CAAC,IAAF,CAAO,IAAP,EAHX;;QAFF;AAMA,eAAO;MATD,CAfR;;;;;MA6BuB,OAAtB,mBAAsB,CAAE,WAAF,EAAe,CAAf,CAAA;AACrB,YAAA;QAAA,CAAA,GAAI,IAAI,KAAJ,CAAY,CAAC,CAAC,IAAF,CAAO,WAAP,CAAZ,EACF;UAAA,GAAA,EAAK,QAAA,CAAE,MAAF,EAAU,GAAV,CAAA;YACH,IAAwB,GAAA,KAAS,MAAjC;AAAA,qBAAO,MAAQ,CAAA,GAAA,EAAf;;YACA,IAAwB,CAAE,QAAQ,CAAC,UAAT,CAAoB,GAApB,CAAF,CAAA,KAA+B,QAAvD;AAAA,qBAAO,MAAQ,CAAA,GAAA,EAAf;;AACA,mBAAO,QAAA,CAAA,GAAE,EAAF,CAAA;qBAAa,MAAA,CAAO,GAAP,EAAY,GAAA,EAAZ;YAAb;UAHJ;QAAL,CADE;QAKJ,CAAG,CAAA,QAAQ,CAAC,mBAAT,CAAH,GAAoC;AACpC,eAAO;MAPc,CA7BvB;;;MAuCc,OAAb,UAAa,CAAE,CAAF,CAAA;AAAS,eAAO,CAAE,CAAE,MAAM,CAAA,SAAE,CAAA,QAAQ,CAAC,IAAjB,CAAsB,CAAtB,CAAF,CAA2B,CAAC,KAA5B,CAAkC,CAAlC,EAAqC,CAAC,CAAtC,CAAF,CAA2C,CAAC,WAA5C,CAAA;MAAhB;;IA1ChB;;IA2CE,QAAC,CAAA,mBAAD,GAAuB,MAAA,CAAO,OAAP;;;;gBAnEzB;;;EAuEA,MAAM,CAAC,OAAP,GAAiB;AAvEjB",
  "sourcesContent": [
    "\n'use strict'\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'MULTIMIX/main'\ndebug                     = CND.get_logger 'debug',     badge\nalert                     = CND.get_logger 'alert',     badge\nwhisper                   = CND.get_logger 'whisper',   badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\ninfo                      = CND.get_logger 'info',      badge\n\n\n#===========================================================================================================\n# MODULE METACLASS provides static methods `@extend()`, `@include()`\n#-----------------------------------------------------------------------------------------------------------\n### The little dance around the module_keywords variable is to ensure we have callback support when mixins\nextend a class. See https://arcturo.github.io/library/coffeescript/03_classes.html ###\n#-----------------------------------------------------------------------------------------------------------\nmodule_keywords = [ 'extended', 'included', ]\n\n#===========================================================================================================\nclass Multimix\n\n  #---------------------------------------------------------------------------------------------------------\n  @extend: ( object ) ->\n    for key, value of object when key not in module_keywords\n      @[ key ] = value\n    object.extended?.apply @\n    return @\n\n  #---------------------------------------------------------------------------------------------------------\n  @include: ( object ) ->\n    for key, value of object when key not in module_keywords\n      # Assign properties to the prototype\n      @::[ key ] = value\n    object.included?.apply @\n    return @\n\n  #---------------------------------------------------------------------------------------------------------\n  export: ( target = null ) ->\n    ### Return an object with methods, bound to the current instance. ###\n    R = target ? {}\n    for k, v of @\n      continue unless v?.bind?\n      if ( v[ Multimix.isa_keymethod_proxy ] ? false )\n        R[ k ] = Multimix.get_keymethod_proxy @, v\n      else\n        R[ k ] = v.bind @\n    return R\n\n  #=========================================================================================================\n  # KEYMETHOD FACTORY\n  #---------------------------------------------------------------------------------------------------------\n  @get_keymethod_proxy = ( bind_target, f ) ->\n    R = new Proxy ( f.bind bind_target ),\n      get: ( target, key ) ->\n        return target[ key ] if key in [ 'bind', ] # ... other properties ...\n        return target[ key ] if ( Multimix.js_type_of key ) is 'symbol'\n        return ( xP... ) -> target key, xP...\n    R[ Multimix.isa_keymethod_proxy ] = true\n    return R\n\n  #=========================================================================================================\n  @js_type_of = ( x ) -> return ( ( Object::toString.call x ).slice 8, -1 ).toLowerCase()\n  @isa_keymethod_proxy = Symbol 'proxy'\n\n\n############################################################################################################\nmodule.exports = Multimix\n\n\n"
  ]
}