{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/tests.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'MULTIMIX/TESTS'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\ntest                      = require 'guy-test'\n#...........................................................................................................\n# MULTIMIX                  = require './main'\n{ mix }                   = require './main'\ntypes                     = require './types'\n{ isa\n  type_of }               = types.export()\n\n\n#===========================================================================================================\n# HELPERS\n#-----------------------------------------------------------------------------------------------------------\ns = ( x ) -> JSON.stringify x, null, '  '\nt = ( x ) -> JSON.stringify x\n\n#-----------------------------------------------------------------------------------------------------------\n@_prune = ->\n  for name, value of @\n    continue if name.startsWith '_'\n    delete @[ name ] unless name in include\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@_main = ->\n  test @, 'timeout': 3000\n\n#-----------------------------------------------------------------------------------------------------------\n# type             value                   equal value             non-equal value                 takes attributes\nsample_values_by_types =\n  boolean:     [ ( true               ), ( true               ), ( false                        ), no,  ]\n  null:        [ ( null               ), ( null               ), ( undefined                    ), no,  ]\n  text:        [ ( 'helo'             ), ( 'helo'             ), ( 'helo!!'                     ), no,  ]\n  undefined:   [ ( undefined          ), ( undefined          ), ( null                         ), no,  ]\n  infinity:    [ ( 1 / 0              ), ( 1 / 0              ), ( -Infinity                    ), no,  ]\n  number:      [ ( 12345              ), ( 12345              ), ( 12345.3                      ), no,  ]\n  #.........................................................................................................\n  map:         [ ( new Map()          ), ( new Map()          ), ( new Map [ [ 'foo', 42, ], ]  ), yes, ]\n  set:         [ ( new Set()          ), ( new Set()          ), ( new Set Array.from 'abcd'    ), yes, ]\n  date:        [ ( new Date()         ), ( new Date()         ), ( new Date '1972-01-01'        ), yes, ]\n  list:        [ ( [ 97, 98, 99, ]    ), ( [ 97, 98, 99, ]    ), ( [ 97, 98, 100, ]             ), yes, ]\n  regex:       [ ( /^xxx$/g           ), ( /^xxx$/g           ), ( /^xxx$/                      ), yes, ]\n  pod:         [ ( {}                 ), ( {}                 ), ( { x: 42, }                   ), yes, ]\n  buffer:      [ ( new Buffer 'helo'  ), ( new Buffer 'helo'  ), ( new Buffer 'helo!!'          ), yes, ]\n  arraybuffer: [ ( new ArrayBuffer 42 ), ( new ArrayBuffer 42 ), ( new ArrayBuffer 43           ), yes, ]\n  #.........................................................................................................\n  error:       [ ( new Error()        ), ( new Error()        ), ( new Error 'what!'            ), yes, ]\n  function:    [ ( ( -> )             ), ( ( -> )             ), ( ( -> )                       ), yes, ]\n  symbol:      [ ( Symbol.for 'xxx'   ), ( Symbol.for 'xxx'   ), ( Symbol.for 'XXX'             ), no,  ]\n  #.........................................................................................................\n  nan:         [ ( NaN                ), ( NaN                ), ( NaN                          ), no,  ]\n  #.........................................................................................................\n###\nThese do not work at the time being:\n  weakmap:     [ ( new WeakMap()      ), ( new WeakMap()      ), ( new WeakMap()          ), no, ]\n  generator:   [ ( ( -> yield 123 )() ), ( ( -> yield 123 )() ), ( ( -> yield 123 )()     ), no, ]\n  arguments:   [ ( arguments          ), ( arguments          ), ( arguments              ), no, ]\n  global:      [ ( global             ), ( global             ), ( global                 ), no, ]\n###\n\n\n#===========================================================================================================\n# TESTS\n#-----------------------------------------------------------------------------------------------------------\n@[ \"demo (1)\" ] = ( T ) ->\n  #.........................................................................................................\n  a =\n    id:           'a'\n    primes:       [ 2, 3, 5, 7, ]\n    report:       -> t { @id, @primes, }\n  #.........................................................................................................\n  b =\n    id:           'b'\n    primes:       [ 13, 17, 23, ]\n  #.........................................................................................................\n  c = ( mix.use fields: { primes: 'append' } ) a, b\n  #.........................................................................................................\n  T.eq a[ 'primes' ], [2,3,5,7]\n  T.eq c[ 'primes' ], [2,3,5,7,13,17,23]\n  T.eq a.report(), '{\"id\":\"a\",\"primes\":[2,3,5,7]}'\n  T.eq c.report(), '{\"id\":\"b\",\"primes\":[2,3,5,7,13,17,23]}'\n  # debug '70200', JSON.stringify a\n  # debug '70200', JSON.stringify c\n  #.........................................................................................................\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"options example (1)\" ] = ( T ) ->\n  #.........................................................................................................\n  options_base =\n    zoom:       '125%'\n    paths:\n      app:      '~/sample'\n      fonts:    '~/.fonts'\n    fonts:\n      files:\n        'Arial':  'HelveticaNeue.ttf'\n      sizes:\n        unit:   'pt'\n        steps:  [ 8, 10, 11, 12, 14, 16, 18, 24, ]\n  #.........................................................................................................\n  options_user =\n    zoom:       '85%'\n    fonts:\n      files:\n        'ComicSans':  'MSComicSans.ttf'\n  #.........................................................................................................\n  options = mix options_base, options_user\n  #.........................................................................................................\n  T.ok options[ 'paths' ] is options_base[ 'paths' ]\n  T.ok options[ 'fonts' ] is options_user[ 'fonts' ]\n  T.eq options[ 'zoom' ], options_user[ 'zoom' ]\n  #.........................................................................................................\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"options example (2)\" ] = ( T ) ->\n  #.........................................................................................................\n  options_base =\n    primes:     [ 2, 3, 5, ]\n    zoom:       '125%'\n    paths:\n      app:      '~/sample'\n      fonts:    '~/.fonts'\n    fonts:\n      files:\n        'Arial':  'HelveticaNeue.ttf'\n      sizes:\n        unit:   'pt'\n        steps:  [ 8, 10, 11, 12, 14, 16, 18, 24, ]\n    words:\n      foo:      3\n      bar:      3\n    speed:      100\n    weight:     456\n    foo:\n      bar:\n        tags:       [ 'alpha', 'beta', 'gamma', 'delta', ]\n    fruit:      'banana'\n  #.........................................................................................................\n  options_user =\n    primes:           [ 7, 11, 13, ]\n    zoom:             '85%'\n    'only-here':      yes\n    'to-be-skipped':  yes\n    fonts:\n      files:\n        'ComicSans':  'MSComicSans.ttf'\n    words:\n      supercalifragilistic: 20\n    speed:            50\n    weight:           123\n    foo:\n      bar:\n        tags:             [ '-alpha', 'beta', 'epsilon', ]\n    fruit:            'pineapple'\n  #.........................................................................................................\n  recipe =\n    fields:\n      primes:           'append'\n      words:            'merge'\n      speed:            'average'\n      weight:           'add'\n      'to-be-skipped':  'skip'\n      foo:\n        bar:\n          tags:             'tag'\n      fruit:            'list'\n      zoom:             ( zoom_percentages ) ->\n        R = 1\n        for percentage in zoom_percentages\n          R *= ( parseFloat percentage ) / 100\n        return \"#{( R * 100 ).toFixed 2}%\"\n  #.........................................................................................................\n  mix_options = mix.use recipe\n  options     = mix_options options_base, options_user\n  # urge '5543', options\n  T.ok options[ 'paths'         ] is options_base[ 'paths' ]\n  T.ok options[ 'fonts'         ] is options_user[ 'fonts' ]\n  T.eq options[ 'primes'        ], [ 2, 3, 5, 7, 11, 13, ]\n  T.eq options[ 'zoom'          ], '106.25%'\n  T.eq options[ 'words'         ], { foo: 3, bar: 3, supercalifragilistic: 20 }\n  T.eq options[ 'speed'         ], 75\n  T.eq options[ 'weight'        ], 579\n  T.eq options[ 'only-here'     ], yes\n  T.eq options[ 'to-be-skipped' ], undefined\n  T.eq options[ 'fruit'         ], [ 'banana', 'pineapple', ]\n  debug '30200', options_base[ 'foo' ][ 'bar' ][ 'tags' ]\n  debug '30200', options_user[ 'foo' ][ 'bar' ][ 'tags' ]\n  debug '30200', options[      'foo' ][ 'bar' ][ 'tags' ]\n  T.eq options[ 'foo' ][ 'bar' ][ 'tags' ], [ 'delta', 'beta', 'gamma', 'epsilon', ]\n  #.........................................................................................................\n  return null\n\n###\n#-----------------------------------------------------------------------------------------------------------\n@[ \"options example (3)\" ] = ( T ) ->\n  #.........................................................................................................\n  options_base =\n    paths:\n      app:      '~/sample'\n      fonts:    '~/.fonts'\n    fonts:\n      files:\n        'Arial':  'HelveticaNeue.ttf'\n  #.........................................................................................................\n  options_user =\n    fonts:\n      files:\n        'ComicSans':  'MSComicSans.ttf'\n  #.........................................................................................................\n  outer_reducers = null\n  fonts_reducers =\n    files:            'merge'\n  #.........................................................................................................\n  options_user_copy             = Object.assign {}, options_user\n  options_user_copy[ 'fonts' ]  = ( mix.use fonts_reducers ) options_base[ 'fonts' ], options_user_copy[ 'fonts' ]\n  options                       = ( mix.use outer_reducers ) options_base, options_user_copy\n  # urge '7631', t options\n  # T.eq options[ 'fonts' ], {\"fonts\":{\"files\":{\"Arial\":\"HelveticaNeue.ttf\",\"ComicSans\":\"MSComicSans.ttf\"}}}\n  T.eq options, {\"paths\":{\"app\":\"~/sample\",\"fonts\":\"~/.fonts\"},\"fonts\":{\"files\":{\"Arial\":\"HelveticaNeue.ttf\",\"ComicSans\":\"MSComicSans.ttf\"}}}\n  #.........................................................................................................\n  return null\n###\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"options example with nested recipe\" ] = ( T ) ->\n  #.........................................................................................................\n  options_base =\n    paths:\n      app:      '~/sample'\n      fonts:    '~/.fonts'\n    fonts:\n      files:\n        'Arial':  'HelveticaNeue.ttf'\n    foo:\n      bar:\n        baz:      42\n  #.........................................................................................................\n  options_user =\n    fonts:\n      files:\n        'ComicSans':  'MSComicSans.ttf'\n    alpha:\n      beta:\n        gamma:    108\n  #.........................................................................................................\n  recipe =\n    fields:\n      fonts:\n        files:      'merge'\n      foo:\n        bar:\n          baz:      ( values, S ) -> S.path\n      alpha:\n        beta:\n          gamma:    ( values, S ) -> S.path\n  #.........................................................................................................\n  options = ( mix.use recipe ) options_base, options_user\n  # urge '7631', t options\n  T.eq options, {\"fonts\":{\"files\":{\"Arial\":\"HelveticaNeue.ttf\",\"ComicSans\":\"MSComicSans.ttf\"}},\"foo\":{\"bar\":{\"baz\":\"foo/bar/baz\"}},\"alpha\":{\"beta\":{\"gamma\":\"alpha/beta/gamma\"}},\"paths\":{\"app\":\"~/sample\",\"fonts\":\"~/.fonts\"}}\n  #.........................................................................................................\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"unused recipe must not cause entry\" ] = ( T ) ->\n  #.........................................................................................................\n  options_base =\n    foo:\n      bar:\n        baz:      42\n  #.........................................................................................................\n  options_user =\n    fonts:\n      files:\n        'ComicSans':  'MSComicSans.ttf'\n  #.........................................................................................................\n  recipe =\n    foo:\n      bar:\n        baz:      ( values, S ) -> S.path\n    alpha:\n      beta:\n        gamma:    ( values, S ) -> S.path\n    delta:        'list'\n    qplah:\n      gagh:       'append'\n  #.........................................................................................................\n  options = ( mix.use recipe ) options_base, options_user\n  # urge '7631', t options\n  T.eq options, {\"foo\":{\"bar\":{\"baz\":\"foo/bar/baz\"}},\"fonts\":{\"files\":{\"ComicSans\":\"MSComicSans.ttf\"}}}\n  #.........................................................................................................\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"`mix` leaves functions as-is\" ] = ( T ) ->\n  #.........................................................................................................\n  options_original =\n    paths:\n      app:      '~/sample'\n      fonts:    '~/.fonts'\n    fonts:\n      files:\n        'Arial':  'HelveticaNeue.ttf'\n    frobulate:\n      plain:    ( x ) -> \"*#{rpr x}*\"\n  #.........................................................................................................\n  options_copy = mix options_original\n  urge '7631-0', options_original\n  urge '7631-1', options_copy\n  T.eq options_original, options_copy\n  T.ok options_original[ 'paths' ] isnt options_copy[ 'paths' ]\n  T.ok options_original[ 'frobulate' ][ 'plain' ] is options_copy[ 'frobulate' ][ 'plain' ]\n  #.........................................................................................................\n  my_mix = mix.use { foo: ( -> 42 ), }\n  #.........................................................................................................\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"`mix.deep_copy` invariances and identities\" ] = ( T ) ->\n  σ_common        = Symbol.for 'common'\n  Σ_private       = Symbol.for 'multimix'\n  my_list         = Array.from '357'\n  my_list[ 'a' ]  = [ 'Aha!', ]\n  #.........................................................................................................\n  library_module = ->\n    @x = [ 108, [ 42, ], ]\n    @y = my_list\n    @f = -> @x\n    @[ σ_common   ] = { foo: 'bar', }\n    @[ Σ_private  ] = [ 'a', 'b', 'c', ]\n  #.........................................................................................................\n  library_module.apply L1 = {}\n  L2 = mix.deep_copy L1\n  #.........................................................................................................\n  debug '1', L1, L1[ σ_common ]\n  # L2 = mix mix.deep_copy L1\n  L2 = mix.deep_copy L1\n  debug '2', L2, L2[ σ_common ]\n  T.ok CND.equals L1,     L2\n  T.ok            L1 isnt L2\n  T.ok CND.equals L1[ σ_common  ],      L2[ σ_common  ]\n  T.ok            L1[ σ_common  ] isnt  L2[ σ_common  ]\n  T.ok CND.equals L1[ Σ_private ],      L2[ Σ_private ]\n  T.ok            L1[ Σ_private ] isnt  L2[ Σ_private ]\n  T.ok CND.equals L1.x,                 L2.x\n  T.ok            L1.x            isnt  L2.x\n  T.ok CND.equals L1.y,                 L2.y\n  T.ok            L1.y            isnt  L2.y\n  #.........................................................................................................\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"test copying samples\" ] = ( T ) ->\n  #.........................................................................................................\n  for type, [ value, eq_value, ne_value, takes_attributes, ] of sample_values_by_types\n    # debug '7170', type, [ value, eq_value, ne_value, is_primitive, ]\n    try\n      Object.keys value\n      has_keys = CND.truth true\n    catch\n      has_keys = CND.truth false\n    # debug type, ( CND.blue type_of value ), ( CND.yellow type_of mix.deep_copy value ), has_keys\n    copied_value = mix.deep_copy value\n    T.eq ( type_of value ), ( type_of copied_value )\n    # debug '2010', type, ( CND.truth is_primitive ), ( CND.truth value is copied_value ), ( CND.truth is_primitive is ( value is copied_value ) )\n  #   if is_primitive\n  #     T.ok value is copied_value\n  #   else\n  #     T.ok value isnt copied_value\n  # #.........................................................................................................\n  # d_1   = /f/g\n  # d_1.x = [ 'foo', ]\n  # d_2   = mix.deep_copy d_1\n  # T.eq d_1,         d_2\n  # T.ok d_1    isnt  d_2\n  # T.eq d_1.x,       d_2.x\n  # T.ok d_1.x  isnt  d_2.x\n  #.........................................................................................................\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"copying primitive values\" ] = ( T ) ->\n  my_mix = mix.use fields: { '': ( ( P... ) -> debug P ), }\n  # info mix 'a', 'b', 'c'\n  info my_mix { '': 'a', }, { '': 'b', }, { '': 'c', }\n  info ( my_mix { '': 'a', }, { '': 'b', }, { '': 'c', } )[ '' ]\n  #.........................................................................................................\n  # T.eq mix(), null\n  # T.eq ( mix null               ), null\n  # T.eq ( mix undefined          ), undefined\n  # T.eq ( mix undefined, null    ), null\n  # T.eq ( mix 'a', 'b', 'c'      ), 'c'\n  # T.eq ( mix 22                 ), 22\n  # T.eq ( mix true               ), true\n  # T.eq ( mix -Infinity          ), -Infinity\n  #.........................................................................................................\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"simple copying\" ] = ( T ) ->\n  #.........................................................................................................\n  data_og_0 =\n    primes:   [ 2, 3, 5, 7, ]\n  #.........................................................................................................\n  data_og_1 =\n    primes:   [ 5, 7, 11, 13, ]\n  #.........................................................................................................\n  my_seed = new Set()\n  #.........................................................................................................\n  recipe =\n    # seed:     -> d = new Set()\n    seed:     my_seed\n    # before:   ( P... ) -> debug '33262-before', P\n    after:    ( S ) ->\n      S.seed.add x for x in S.seed[ 'primes' ]\n      delete S.seed[ 'primes' ]\n    fields:\n      # '':       ( P... ) -> debug P\n      primes:   'append'\n  #.........................................................................................................\n  debug '39302', data_ng = ( mix.use recipe ) data_og_0, data_og_1\n  T.ok data_ng is my_seed\n  #.........................................................................................................\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"raw copying\" ] = ( T ) ->\n  σ_unknown_type  = Symbol.for 'unknown_type'\n  L               = require './copiers'\n  #.........................................................................................................\n  raw_copy = ( x ) ->\n    type          = type_of x\n    description   = L.type_descriptions[ type ] ? L.type_descriptions[ σ_unknown_type ]\n    { has_fields\n      copy      } = description\n    return copy.call L, x\n  #.........................................................................................................\n  primitive_value_probes = [\n    null\n    undefined\n    true\n    false\n    123\n    +Infinity\n    -Infinity\n    'abcdef'\n    # Symbol.for 'key'\n    ]\n  #.........................................................................................................\n  constructor_probes = [\n    /^xa*$/g\n    new Date '1983-06-01'\n    ]\n  #.........................................................................................................\n  object_probes = [\n    [ 1, 2, 3, ]\n    { a: 123, b: 456, }\n    ]\n  #.........................................................................................................\n  for probe in primitive_value_probes\n    # debug ( rpr probe ), rpr raw_copy probe\n    T.ok probe is raw_copy probe\n  #.........................................................................................................\n  for probe in constructor_probes\n    result = raw_copy probe\n    debug ( rpr probe ), rpr result\n    T.eq probe,     result\n    T.ok probe isnt result\n  #.........................................................................................................\n  for probe in object_probes\n    result = raw_copy probe\n    debug ( rpr probe ), rpr result\n    debug ( rpr probe ), rpr result\n    # T.eq probe,     result\n    # T.ok probe isnt result\n  #.........................................................................................................\n  return null\n\n\n############################################################################################################\nunless module.parent?\n  # debug '0980', JSON.stringify ( Object.keys @ ), null, '  '\n  include = [\n    \"demo (1)\"\n    \"options example (1)\"\n    \"options example (2)\"\n    \"options example (3)\"\n    \"options example with nested recipe\"\n    \"unused recipe must not cause entry\"\n    \"`mix` leaves functions as-is\"\n    \"`mix.deep_copy` invariances and identities\"\n    \"test copying samples\"\n    \"copying primitive values\"\n    \"simple copying\"\n    \"raw copying\"\n    ]\n  @_prune()\n  @_main()\n\n  # debug Object.keys MULTIMIX\n  # debug Object.keys mix\n  # debug Object.keys mix.tools\n\n  ###\n  σ_x = Symbol.for 'x'\n  y   = 'x234'\n  # d = { x: 42, \"#{y}\": 108, \"#{σ_x}\": 123456, }\n  `\n  d = { x: 42, [y]: 108, [σ_x]: 123456, }\n  `\n  debug d\n  debug Object.keys d\n  debug ( k for k of d )\n  debug d[ σ_x ]\n  ###\n\n\n\n\n\n\n\n"
  ]
}