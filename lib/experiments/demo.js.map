{
  "version": 3,
  "file": "demo.js",
  "sourceRoot": "../..",
  "sources": [
    "src/experiments/demo.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'MULTIMIX/EXPERIMENTS/ES6-CLASSES-WITH.MIXINS'\ndebug                     = CND.get_logger 'debug',     badge\nalert                     = CND.get_logger 'alert',     badge\nwhisper                   = CND.get_logger 'whisper',   badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\ninfo                      = CND.get_logger 'info',      badge\n\n\n#-----------------------------------------------------------------------------------------------------------\nraw_example = ->\n\n  ###\n\n\n  ###\n\n  ###\n\n  let's integrate mixins into CoffeeScript's classes. We're going to define a class called Module that we can\n  inherit from for mixin support. Module will have two static functions, @extend() and @include() which we can\n  use for extending the class with static and instance properties respectively.\n\n  ###\n\n  #-----------------------------------------------------------------------------------------------------------\n  moduleKeywords = [ 'extended', 'included', ]\n\n  #-----------------------------------------------------------------------------------------------------------\n  get_keymethod_proxy = ( f ) -> new Proxy f,\n    get: ( target, key ) -> ( xP... ) -> target key, xP...\n\n  #-----------------------------------------------------------------------------------------------------------\n  class Module\n    constructor: -> @classname = 'Module'\n\n    #.........................................................................................................\n    @extend: ( object ) ->\n      for key, value of object when key not in moduleKeywords\n        @[ key ] = value\n      object.extended?.apply @\n      return @\n\n    #.........................................................................................................\n    @include: ( object ) ->\n      for key, value of object when key not in moduleKeywords\n        # Assign properties to the prototype\n        @::[ key ] = value\n      object.included?.apply @\n      return @\n\n  ###\n\n  The little dance around the moduleKeywords variable is to ensure we have callback support when mixins extend\n  a class. Let's take a look at our Module class in action:\n\n  ###\n\n  #-----------------------------------------------------------------------------------------------------------\n  object_with_class_properties =\n    find:   ( id    ) -> info \"class method 'find()'\", ( k for k of @ )\n    create: ( attrs ) -> info \"class method 'create()'\", ( k for k of @ )\n\n  #-----------------------------------------------------------------------------------------------------------\n  object_with_instance_properties =\n    save: -> info \"instance method 'save()'\", ( k for k of @ )\n\n  #-----------------------------------------------------------------------------------------------------------\n  isa = get_keymethod_proxy ( type, P... ) ->\n    info \"µ1129 object #{rpr @instance_name} isa #{rpr type} called with #{rpr P}\"\n    info \"µ1129 my @specs: #{rpr @specs}\"\n\n  #-----------------------------------------------------------------------------------------------------------\n  class User extends Module\n    @extend   object_with_class_properties\n    @include  object_with_instance_properties\n    @include { isa, }\n    constructor: ( @instance_name ) ->\n      super()\n      @classname = 'User'\n      @specs = {}\n    instance_method_on_User: -> info \"instance method 'instance_method_on_User()'\", ( k for k of @ )\n    declare: ( type, value ) -> @specs[ type ] = value\n\n  #-----------------------------------------------------------------------------------------------------------\n  class Refined_user extends User\n    constructor: ->\n      super()\n      @classname = 'Refined_user'\n      @get_classname = -> @classname\n    # save: -> \"method save() overwritten by Refined_user\"\n    instance_method_on_refined_user: -> info \"instance method 'instance_method_on_refined_user()'\", ( k for k of @ )\n\n  debug \"properties of class User\", ( k for k of User )\n  debug \"properties of class User::\", ( k for k of User:: )\n  debug \"properties of class Refined_user\", ( k for k of Refined_user )\n  debug \"properties of class Refined_user::\", ( k for k of Refined_user:: )\n\n  #-----------------------------------------------------------------------------------------------------------\n  # Usage:\n  debug 'µ100-1', user = User.find 1\n  debug 'µ100-2', user = new User()\n  debug 'µ100-3', user.save()\n  debug 'µ100-4', user.save.foobar = 42\n  debug 'µ100-5', user.classname\n  debug 'µ100-6', ruser = new Refined_user()\n  debug 'µ100-7', ruser.instance_method_on_refined_user()\n  debug 'µ100-8', ruser.save()\n  debug 'µ100-9', ruser.save.foobar\n  debug 'µ100-10', ruser.save is user.save\n  debug 'µ100-11', ruser.classname\n  debug 'µ100-12', ruser.get_classname()\n\n  user_1 = new User 'user_1'\n  user_1.declare 'user_1_type_A', 'type_A'\n  user_1.declare 'user_1_type_B', 'type_B'\n  user_2 = new User 'user_2'\n  user_2.declare 'user_2_type_C', 'type_C'\n  user_2.declare 'user_2_type_D', 'type_D'\n  user_2.declare 'user_2_type_E', 'type_E'\n  whisper '-'.repeat 108\n  debug 'µ100-13', user_1\n  debug 'µ100-14', user_1.isa 'type_A', 1\n  debug 'µ100-15', user_1.isa.type_A, 1\n  whisper '-'.repeat 108\n  debug 'µ100-16', user_2\n  debug 'µ100-17', user_2.isa 'type_A', 1\n  debug 'µ100-18', user_2.isa.type_A, 1\n  debug 'µ100-19', user_2.isa 'type_C', 1\n  debug 'µ100-20', user_2.isa.type_C, 1\n\n\n#-----------------------------------------------------------------------------------------------------------\nrewritten_example = ->\n\n\n  #===========================================================================================================\n  # MODULE METACLASS provides static methods `@extend()`, `@include()`\n  #-----------------------------------------------------------------------------------------------------------\n  ### The little dance around the module_keywords variable is to ensure we have callback support when mixins\n  extend a class. See https://arcturo.github.io/library/coffeescript/03_classes.html ###\n  #-----------------------------------------------------------------------------------------------------------\n  module_keywords = [ 'extended', 'included', ]\n\n  #===========================================================================================================\n  class Multimix\n\n    #---------------------------------------------------------------------------------------------------------\n    @extend: ( object ) ->\n      for key, value of object when key not in module_keywords\n        @[ key ] = value\n      object.extended?.apply @\n      return @\n\n    #---------------------------------------------------------------------------------------------------------\n    @include: ( object ) ->\n      for key, value of object when key not in module_keywords\n        # Assign properties to the prototype\n        @::[ key ] = value\n      object.included?.apply @\n      return @\n\n    #---------------------------------------------------------------------------------------------------------\n    export_methods: ->\n      ### Return an object with methods, bound to the current instance. ###\n      R = {}\n      for k, v of @\n        continue unless v?.bind?\n        if ( v[ isa_keymethod_proxy ] ? false )\n          R[ k ] = _get_keymethod_proxy @, v\n        else\n          R[ k ] = v.bind @\n      return R\n\n  #===========================================================================================================\n  # KEYMETHOD FACTORY\n  #-----------------------------------------------------------------------------------------------------------\n  _get_keymethod_proxy = ( bind_target, f ) ->\n    R = new Proxy ( f.bind bind_target ),\n      get: ( target, key ) ->\n        return target[ key ] if key in [ 'bind', ] # ... other properties ...\n        return target[ key ] if ( js_type_of key ) is 'symbol'\n        return ( xP... ) -> target key, xP...\n    R[ isa_keymethod_proxy ] = true\n    return R\n\n\n  #===========================================================================================================\n  # SAMPLE OBJECTS WITH INSTANCE METHODS, STATIC METHODS\n  #-----------------------------------------------------------------------------------------------------------\n  object_with_class_properties =\n    find:   ( id    ) -> info \"class method 'find()'\", ( k for k of @ )\n    create: ( attrs ) -> info \"class method 'create()'\", ( k for k of @ )\n\n  #-----------------------------------------------------------------------------------------------------------\n  object_with_instance_properties =\n    save: -> info \"instance method 'save()'\", ( k for k of @ )\n\n    # #---------------------------------------------------------------------------------------------------------\n    # isa: get_keymethod_proxy ( type, P... ) ->\n    #   urge \"µ1129 object #{rpr @instance_name} isa #{rpr type} called with #{rpr P}\"\n    #   urge \"µ1129 my @specs: #{rpr @specs}\"\n    #   urge \"µ1129 spec for type #{rpr type}: #{rpr @specs[ type ]}\"\n\n  #===========================================================================================================\n  js_type_of = ( x ) -> return ( ( Object::toString.call x ).slice 8, -1 ).toLowerCase()\n  isa_keymethod_proxy = Symbol 'proxy'\n\n  #-----------------------------------------------------------------------------------------------------------\n  isa = ( type, xP... ) ->\n    ### NOTE realistic method should throw error when `type` not in `specs` ###\n    urge \"µ1129 object #{rpr @instance_name} isa #{rpr type} called with #{rpr xP}\"\n    urge \"µ1129 my @specs: #{rpr @specs}\"\n    urge \"µ1129 spec for type #{rpr type}: #{rpr @specs[ type ]}\"\n\n  #-----------------------------------------------------------------------------------------------------------\n  class Intertype extends Multimix\n    @extend   object_with_class_properties\n    @include  object_with_instance_properties\n\n    #---------------------------------------------------------------------------------------------------------\n    constructor: ( @instance_name ) ->\n      super()\n      @specs = {}\n      @declare type, value for type, value of @constructor.base_types\n      @isa = _get_keymethod_proxy @, isa\n\n    #---------------------------------------------------------------------------------------------------------\n    declare: ( type, value ) ->\n      whisper 'µ7474', 'declare', type, rpr value\n      @specs[ type ] = value\n\n    #---------------------------------------------------------------------------------------------------------\n    @base_types =\n      foo: 'spec for type foo'\n      bar: 'spec for type bar'\n\n\n  ############################################################################################################\n  intertype_1 = new Intertype\n  intertype_2 = new Intertype\n\n  info 'µ002-1', Intertype.base_types\n  info 'µ002-2', intertype_1.declare 'new_on_it1', 'a new hope'\n  info 'µ002-3', 'intertype_1.specs', intertype_1.specs\n  info 'µ002-4', 'intertype_2.specs', intertype_2.specs\n  info 'µ002-5', intertype_1.isa 'new_on_it1', 1, 2, 3\n  info 'µ002-6', intertype_1.isa.new_on_it1    1, 2, 3\n  info 'µ002-7', intertype_2.isa 'new_on_it1', 1, 2, 3\n  info 'µ002-8', intertype_2.isa.new_on_it1    1, 2, 3\n  { isa, declare, } = intertype_1.export_methods()\n  info 'µ002-9', isa 'new_on_it1', 1, 2, 3\n  info 'µ002-10', isa.new_on_it1    1, 2, 3\n\n\n\n############################################################################################################\nunless module.parent?\n  # raw_example()\n  rewritten_example()\n\n"
  ]
}