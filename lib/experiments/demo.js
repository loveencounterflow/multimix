// Generated by CoffeeScript 2.3.2
(function() {
  'use strict';
  var CND, alert, badge, debug, help, info, raw_example, rewritten_example, rpr, urge, warn, whisper,
    indexOf = [].indexOf;

  //###########################################################################################################
  CND = require('cnd');

  rpr = CND.rpr;

  badge = 'MULTIMIX/EXPERIMENTS/ES6-CLASSES-WITH.MIXINS';

  debug = CND.get_logger('debug', badge);

  alert = CND.get_logger('alert', badge);

  whisper = CND.get_logger('whisper', badge);

  warn = CND.get_logger('warn', badge);

  help = CND.get_logger('help', badge);

  urge = CND.get_logger('urge', badge);

  info = CND.get_logger('info', badge);

  //-----------------------------------------------------------------------------------------------------------
  raw_example = function() {
    var Module, Refined_user, User, get_keymethod_proxy, isa, k, moduleKeywords, object_with_class_properties, object_with_instance_properties, ruser, user, user_1, user_2;
    /*

    */
    /*

    let's integrate mixins into CoffeeScript's classes. We're going to define a class called Module that we can
    inherit from for mixin support. Module will have two static functions, @extend() and @include() which we can
    use for extending the class with static and instance properties respectively.

    */
    //-----------------------------------------------------------------------------------------------------------
    moduleKeywords = ['extended', 'included'];
    //-----------------------------------------------------------------------------------------------------------
    get_keymethod_proxy = function(f) {
      return new Proxy(f, {
        get: function(target, key) {
          return function(...xP) {
            return target(key, ...xP);
          };
        }
      });
    };
    //-----------------------------------------------------------------------------------------------------------
    Module = class Module {
      constructor() {
        this.classname = 'Module';
      }

      //.........................................................................................................
      static extend(object) {
        var key, ref, value;
        for (key in object) {
          value = object[key];
          if (indexOf.call(moduleKeywords, key) < 0) {
            this[key] = value;
          }
        }
        if ((ref = object.extended) != null) {
          ref.apply(this);
        }
        return this;
      }

      //.........................................................................................................
      static include(object) {
        var key, ref, value;
        for (key in object) {
          value = object[key];
          if (indexOf.call(moduleKeywords, key) < 0) {
            // Assign properties to the prototype
            this.prototype[key] = value;
          }
        }
        if ((ref = object.included) != null) {
          ref.apply(this);
        }
        return this;
      }

    };
    /*

    The little dance around the moduleKeywords variable is to ensure we have callback support when mixins extend
    a class. Let's take a look at our Module class in action:

    */
    //-----------------------------------------------------------------------------------------------------------
    object_with_class_properties = {
      find: function(id) {
        var k;
        return info("class method 'find()'", (function() {
          var results;
          results = [];
          for (k in this) {
            results.push(k);
          }
          return results;
        }).call(this));
      },
      create: function(attrs) {
        var k;
        return info("class method 'create()'", (function() {
          var results;
          results = [];
          for (k in this) {
            results.push(k);
          }
          return results;
        }).call(this));
      }
    };
    //-----------------------------------------------------------------------------------------------------------
    object_with_instance_properties = {
      save: function() {
        var k;
        return info("instance method 'save()'", (function() {
          var results;
          results = [];
          for (k in this) {
            results.push(k);
          }
          return results;
        }).call(this));
      }
    };
    //-----------------------------------------------------------------------------------------------------------
    isa = get_keymethod_proxy(function(type, ...P) {
      info(`µ1129 object ${rpr(this.instance_name)} isa ${rpr(type)} called with ${rpr(P)}`);
      return info(`µ1129 my @specs: ${rpr(this.specs)}`);
    });
    User = (function() {
      //-----------------------------------------------------------------------------------------------------------
      class User extends Module {
        constructor(instance_name) {
          super();
          this.instance_name = instance_name;
          this.classname = 'User';
          this.specs = {};
        }

        instance_method_on_User() {
          var k;
          return info("instance method 'instance_method_on_User()'", (function() {
            var results;
            results = [];
            for (k in this) {
              results.push(k);
            }
            return results;
          }).call(this));
        }

        declare(type, value) {
          return this.specs[type] = value;
        }

      };

      User.extend(object_with_class_properties);

      User.include(object_with_instance_properties);

      User.include({isa});

      return User;

    }).call(this);
    //-----------------------------------------------------------------------------------------------------------
    Refined_user = class Refined_user extends User {
      constructor() {
        super();
        this.classname = 'Refined_user';
        this.get_classname = function() {
          return this.classname;
        };
      }

      // save: -> "method save() overwritten by Refined_user"
      instance_method_on_refined_user() {
        var k;
        return info("instance method 'instance_method_on_refined_user()'", (function() {
          var results;
          results = [];
          for (k in this) {
            results.push(k);
          }
          return results;
        }).call(this));
      }

    };
    debug("properties of class User", (function() {
      var results;
      results = [];
      for (k in User) {
        results.push(k);
      }
      return results;
    })());
    debug("properties of class User::", (function() {
      var results;
      results = [];
      for (k in User.prototype) {
        results.push(k);
      }
      return results;
    })());
    debug("properties of class Refined_user", (function() {
      var results;
      results = [];
      for (k in Refined_user) {
        results.push(k);
      }
      return results;
    })());
    debug("properties of class Refined_user::", (function() {
      var results;
      results = [];
      for (k in Refined_user.prototype) {
        results.push(k);
      }
      return results;
    })());
    //-----------------------------------------------------------------------------------------------------------
    // Usage:
    debug('µ100-1', user = User.find(1));
    debug('µ100-2', user = new User());
    debug('µ100-3', user.save());
    debug('µ100-4', user.save.foobar = 42);
    debug('µ100-5', user.classname);
    debug('µ100-6', ruser = new Refined_user());
    debug('µ100-7', ruser.instance_method_on_refined_user());
    debug('µ100-8', ruser.save());
    debug('µ100-9', ruser.save.foobar);
    debug('µ100-10', ruser.save === user.save);
    debug('µ100-11', ruser.classname);
    debug('µ100-12', ruser.get_classname());
    user_1 = new User('user_1');
    user_1.declare('user_1_type_A', 'type_A');
    user_1.declare('user_1_type_B', 'type_B');
    user_2 = new User('user_2');
    user_2.declare('user_2_type_C', 'type_C');
    user_2.declare('user_2_type_D', 'type_D');
    user_2.declare('user_2_type_E', 'type_E');
    whisper('-'.repeat(108));
    debug('µ100-13', user_1);
    debug('µ100-14', user_1.isa('type_A', 1));
    debug('µ100-15', user_1.isa.type_A, 1);
    whisper('-'.repeat(108));
    debug('µ100-16', user_2);
    debug('µ100-17', user_2.isa('type_A', 1));
    debug('µ100-18', user_2.isa.type_A, 1);
    debug('µ100-19', user_2.isa('type_C', 1));
    return debug('µ100-20', user_2.isa.type_C, 1);
  };

  //-----------------------------------------------------------------------------------------------------------
  rewritten_example = function() {
    var Intertype, Multimix, _get_keymethod_proxy, declare, intertype_1, intertype_2, isa, isa_keymethod_proxy, js_type_of, module_keywords, object_with_class_properties, object_with_instance_properties;
    //===========================================================================================================
    // MODULE METACLASS provides static methods `@extend()`, `@include()`
    //-----------------------------------------------------------------------------------------------------------
    /* The little dance around the module_keywords variable is to ensure we have callback support when mixins
    extend a class. See https://arcturo.github.io/library/coffeescript/03_classes.html */
    //-----------------------------------------------------------------------------------------------------------
    module_keywords = ['extended', 'included'];
    //===========================================================================================================
    Multimix = class Multimix {
      //---------------------------------------------------------------------------------------------------------
      static extend(object) {
        var key, ref, value;
        for (key in object) {
          value = object[key];
          if (indexOf.call(module_keywords, key) < 0) {
            this[key] = value;
          }
        }
        if ((ref = object.extended) != null) {
          ref.apply(this);
        }
        return this;
      }

      //---------------------------------------------------------------------------------------------------------
      static include(object) {
        var key, ref, value;
        for (key in object) {
          value = object[key];
          if (indexOf.call(module_keywords, key) < 0) {
            // Assign properties to the prototype
            this.prototype[key] = value;
          }
        }
        if ((ref = object.included) != null) {
          ref.apply(this);
        }
        return this;
      }

      //---------------------------------------------------------------------------------------------------------
      export_methods() {
        /* Return an object with methods, bound to the current instance. */
        var R, k, ref, ref1, v;
        R = {};
        ref = this;
        for (k in ref) {
          v = ref[k];
          if ((v != null ? v.bind : void 0) == null) {
            continue;
          }
          if ((ref1 = v[isa_keymethod_proxy]) != null ? ref1 : false) {
            R[k] = _get_keymethod_proxy(this, v);
          } else {
            R[k] = v.bind(this);
          }
        }
        return R;
      }

    };
    //===========================================================================================================
    // KEYMETHOD FACTORY
    //-----------------------------------------------------------------------------------------------------------
    _get_keymethod_proxy = function(bind_target, f) {
      var R;
      R = new Proxy(f.bind(bind_target), {
        get: function(target, key) {
          if (key === 'bind') { // ... other properties ...
            return target[key];
          }
          if ((js_type_of(key)) === 'symbol') {
            return target[key];
          }
          return function(...xP) {
            return target(key, ...xP);
          };
        }
      });
      R[isa_keymethod_proxy] = true;
      return R;
    };
    //===========================================================================================================
    // SAMPLE OBJECTS WITH INSTANCE METHODS, STATIC METHODS
    //-----------------------------------------------------------------------------------------------------------
    object_with_class_properties = {
      find: function(id) {
        var k;
        return info("class method 'find()'", (function() {
          var results;
          results = [];
          for (k in this) {
            results.push(k);
          }
          return results;
        }).call(this));
      },
      create: function(attrs) {
        var k;
        return info("class method 'create()'", (function() {
          var results;
          results = [];
          for (k in this) {
            results.push(k);
          }
          return results;
        }).call(this));
      }
    };
    //-----------------------------------------------------------------------------------------------------------
    object_with_instance_properties = {
      save: function() {
        var k;
        return info("instance method 'save()'", (function() {
          var results;
          results = [];
          for (k in this) {
            results.push(k);
          }
          return results;
        }).call(this));
      }
    };
    // #---------------------------------------------------------------------------------------------------------
    // isa: get_keymethod_proxy ( type, P... ) ->
    //   urge "µ1129 object #{rpr @instance_name} isa #{rpr type} called with #{rpr P}"
    //   urge "µ1129 my @specs: #{rpr @specs}"
    //   urge "µ1129 spec for type #{rpr type}: #{rpr @specs[ type ]}"

    //===========================================================================================================
    js_type_of = function(x) {
      return ((Object.prototype.toString.call(x)).slice(8, -1)).toLowerCase();
    };
    isa_keymethod_proxy = Symbol('proxy');
    //-----------------------------------------------------------------------------------------------------------
    isa = function(type, ...xP) {
      /* NOTE realistic method should throw error when `type` not in `specs` */
      urge(`µ1129 object ${rpr(this.instance_name)} isa ${rpr(type)} called with ${rpr(xP)}`);
      urge(`µ1129 my @specs: ${rpr(this.specs)}`);
      return urge(`µ1129 spec for type ${rpr(type)}: ${rpr(this.specs[type])}`);
    };
    Intertype = (function() {
      //-----------------------------------------------------------------------------------------------------------
      class Intertype extends Multimix {
        //---------------------------------------------------------------------------------------------------------
        constructor(instance_name) {
          var ref, type, value;
          super();
          this.instance_name = instance_name;
          this.specs = {};
          ref = this.constructor.base_types;
          for (type in ref) {
            value = ref[type];
            this.declare(type, value);
          }
          this.isa = _get_keymethod_proxy(this, isa);
        }

        //---------------------------------------------------------------------------------------------------------
        declare(type, value) {
          whisper('µ7474', 'declare', type, rpr(value));
          return this.specs[type] = value;
        }

      };

      Intertype.extend(object_with_class_properties);

      Intertype.include(object_with_instance_properties);

      //---------------------------------------------------------------------------------------------------------
      Intertype.base_types = {
        foo: 'spec for type foo',
        bar: 'spec for type bar'
      };

      return Intertype;

    }).call(this);
    //###########################################################################################################
    intertype_1 = new Intertype;
    intertype_2 = new Intertype;
    info('µ002-1', Intertype.base_types);
    info('µ002-2', intertype_1.declare('new_on_it1', 'a new hope'));
    info('µ002-3', 'intertype_1.specs', intertype_1.specs);
    info('µ002-4', 'intertype_2.specs', intertype_2.specs);
    info('µ002-5', intertype_1.isa('new_on_it1', 1, 2, 3));
    info('µ002-6', intertype_1.isa.new_on_it1(1, 2, 3));
    info('µ002-7', intertype_2.isa('new_on_it1', 1, 2, 3));
    info('µ002-8', intertype_2.isa.new_on_it1(1, 2, 3));
    ({isa, declare} = intertype_1.export_methods());
    info('µ002-9', isa('new_on_it1', 1, 2, 3));
    return info('µ002-10', isa.new_on_it1(1, 2, 3));
  };

  //###########################################################################################################
  if (module.parent == null) {
    // raw_example()
    rewritten_example();
  }

}).call(this);

//# sourceMappingURL=demo.js.map
